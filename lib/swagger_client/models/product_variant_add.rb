=begin
#Swagger API2Cart

#API2Cart

OpenAPI spec version: 1.1
Contact: contact@api2cart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require 'date'

module SwaggerClient

  class ProductVariantAdd
    # Defines product's id where the variant has to be added
    attr_accessor :product_id

    # Defines variant's name that has to be added
    attr_accessor :name

    # Specifies variant's model that has to be added
    attr_accessor :model

    # Defines new product's variant price
    attr_accessor :price

    # Defines variant's attributes list
    attr_accessor :attributes

    # Specifies variant's description
    attr_accessor :description

    # Specifies variant's model that has to be added
    attr_accessor :special_price

    # Defines the date of special price creation
    attr_accessor :sprice_create

    # Defines the date of special price modification
    attr_accessor :sprice_modified

    # Defines the term of special price offer duration
    attr_accessor :sprice_expire

    # Specifies the set of visible/invisible product's variants for users
    attr_accessor :available_for_view

    # Specifies the set of visible/invisible product's variants for sale
    attr_accessor :available_for_sale

    # Weight
    attr_accessor :weight

    # Defines short description
    attr_accessor :short_description

    # This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
    attr_accessor :warehouse_id

    # Defines product variant's quantity that has to be added
    attr_accessor :quantity

    # Defines the date of entity creation
    attr_accessor :created_at

    # Specifies the product variant's manufacturer
    attr_accessor :manufacturer

    # Defines tax classes where entity has to be added
    attr_accessor :tax_class_id

    # Defines unique meta title for each entity
    attr_accessor :meta_title

    # Defines unique meta keywords for each entity
    attr_accessor :meta_keywords

    # Defines unique meta description of a entity
    attr_accessor :meta_description

    # Defines unique product variant's URL
    attr_accessor :url

    # Add variants specified by store id
    attr_accessor :store_id

    # Language id
    attr_accessor :lang_id

    # Is cache clear required
    attr_accessor :clear_cache


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'product_id' => :'product_id',
        :'name' => :'name',
        :'model' => :'model',
        :'price' => :'price',
        :'attributes' => :'attributes',
        :'description' => :'description',
        :'special_price' => :'special_price',
        :'sprice_create' => :'sprice_create',
        :'sprice_modified' => :'sprice_modified',
        :'sprice_expire' => :'sprice_expire',
        :'available_for_view' => :'available_for_view',
        :'available_for_sale' => :'available_for_sale',
        :'weight' => :'weight',
        :'short_description' => :'short_description',
        :'warehouse_id' => :'warehouse_id',
        :'quantity' => :'quantity',
        :'created_at' => :'created_at',
        :'manufacturer' => :'manufacturer',
        :'tax_class_id' => :'tax_class_id',
        :'meta_title' => :'meta_title',
        :'meta_keywords' => :'meta_keywords',
        :'meta_description' => :'meta_description',
        :'url' => :'url',
        :'store_id' => :'store_id',
        :'lang_id' => :'lang_id',
        :'clear_cache' => :'clear_cache'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'product_id' => :'String',
        :'name' => :'String',
        :'model' => :'String',
        :'price' => :'Float',
        :'attributes' => :'Array<String>',
        :'description' => :'String',
        :'special_price' => :'Float',
        :'sprice_create' => :'String',
        :'sprice_modified' => :'String',
        :'sprice_expire' => :'String',
        :'available_for_view' => :'BOOLEAN',
        :'available_for_sale' => :'BOOLEAN',
        :'weight' => :'Float',
        :'short_description' => :'String',
        :'warehouse_id' => :'String',
        :'quantity' => :'Float',
        :'created_at' => :'String',
        :'manufacturer' => :'String',
        :'tax_class_id' => :'Integer',
        :'meta_title' => :'String',
        :'meta_keywords' => :'String',
        :'meta_description' => :'String',
        :'url' => :'String',
        :'store_id' => :'String',
        :'lang_id' => :'String',
        :'clear_cache' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'attributes')
        if (value = attributes[:'attributes']).is_a?(Array)
          self.attributes = value
        end
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'special_price')
        self.special_price = attributes[:'special_price']
      end

      if attributes.has_key?(:'sprice_create')
        self.sprice_create = attributes[:'sprice_create']
      end

      if attributes.has_key?(:'sprice_modified')
        self.sprice_modified = attributes[:'sprice_modified']
      end

      if attributes.has_key?(:'sprice_expire')
        self.sprice_expire = attributes[:'sprice_expire']
      end

      if attributes.has_key?(:'available_for_view')
        self.available_for_view = attributes[:'available_for_view']
      else
        self.available_for_view = true
      end

      if attributes.has_key?(:'available_for_sale')
        self.available_for_sale = attributes[:'available_for_sale']
      else
        self.available_for_sale = true
      end

      if attributes.has_key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.has_key?(:'short_description')
        self.short_description = attributes[:'short_description']
      end

      if attributes.has_key?(:'warehouse_id')
        self.warehouse_id = attributes[:'warehouse_id']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'manufacturer')
        self.manufacturer = attributes[:'manufacturer']
      end

      if attributes.has_key?(:'tax_class_id')
        self.tax_class_id = attributes[:'tax_class_id']
      end

      if attributes.has_key?(:'meta_title')
        self.meta_title = attributes[:'meta_title']
      end

      if attributes.has_key?(:'meta_keywords')
        self.meta_keywords = attributes[:'meta_keywords']
      end

      if attributes.has_key?(:'meta_description')
        self.meta_description = attributes[:'meta_description']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.has_key?(:'lang_id')
        self.lang_id = attributes[:'lang_id']
      end

      if attributes.has_key?(:'clear_cache')
        self.clear_cache = attributes[:'clear_cache']
      else
        self.clear_cache = true
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @product_id.nil?
        invalid_properties.push("invalid value for 'product_id', product_id cannot be nil.")
      end

      if @model.nil?
        invalid_properties.push("invalid value for 'model', model cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @product_id.nil?
      return false if @model.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          product_id == o.product_id &&
          name == o.name &&
          model == o.model &&
          price == o.price &&
          attributes == o.attributes &&
          description == o.description &&
          special_price == o.special_price &&
          sprice_create == o.sprice_create &&
          sprice_modified == o.sprice_modified &&
          sprice_expire == o.sprice_expire &&
          available_for_view == o.available_for_view &&
          available_for_sale == o.available_for_sale &&
          weight == o.weight &&
          short_description == o.short_description &&
          warehouse_id == o.warehouse_id &&
          quantity == o.quantity &&
          created_at == o.created_at &&
          manufacturer == o.manufacturer &&
          tax_class_id == o.tax_class_id &&
          meta_title == o.meta_title &&
          meta_keywords == o.meta_keywords &&
          meta_description == o.meta_description &&
          url == o.url &&
          store_id == o.store_id &&
          lang_id == o.lang_id &&
          clear_cache == o.clear_cache
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [product_id, name, model, price, attributes, description, special_price, sprice_create, sprice_modified, sprice_expire, available_for_view, available_for_sale, weight, short_description, warehouse_id, quantity, created_at, manufacturer, tax_class_id, meta_title, meta_keywords, meta_description, url, store_id, lang_id, clear_cache].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
