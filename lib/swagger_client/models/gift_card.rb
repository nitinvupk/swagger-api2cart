=begin
#Swagger API2Cart

#API2Cart

OpenAPI spec version: 1.1
Contact: contact@api2cart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require 'date'

module SwaggerClient

  class GiftCard
    attr_accessor :id

    attr_accessor :code

    attr_accessor :name

    attr_accessor :type

    attr_accessor :currency_code

    attr_accessor :amount

    attr_accessor :initial_amount

    attr_accessor :status

    attr_accessor :created_at

    attr_accessor :avail_to

    attr_accessor :free_product_ids

    attr_accessor :message

    attr_accessor :owner_email

    attr_accessor :recipient_email

    attr_accessor :owner_name

    attr_accessor :recipient_name

    attr_accessor :usage_history

    attr_accessor :additional_fields

    attr_accessor :custom_fields


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'code' => :'code',
        :'name' => :'name',
        :'type' => :'type',
        :'currency_code' => :'currency_code',
        :'amount' => :'amount',
        :'initial_amount' => :'initial_amount',
        :'status' => :'status',
        :'created_at' => :'created_at',
        :'avail_to' => :'avail_to',
        :'free_product_ids' => :'free_product_ids',
        :'message' => :'message',
        :'owner_email' => :'owner_email',
        :'recipient_email' => :'recipient_email',
        :'owner_name' => :'owner_name',
        :'recipient_name' => :'recipient_name',
        :'usage_history' => :'usage_history',
        :'additional_fields' => :'additional_fields',
        :'custom_fields' => :'custom_fields'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'code' => :'String',
        :'name' => :'String',
        :'type' => :'String',
        :'currency_code' => :'String',
        :'amount' => :'Float',
        :'initial_amount' => :'Float',
        :'status' => :'String',
        :'created_at' => :'String',
        :'avail_to' => :'String',
        :'free_product_ids' => :'String',
        :'message' => :'String',
        :'owner_email' => :'String',
        :'recipient_email' => :'String',
        :'owner_name' => :'String',
        :'recipient_name' => :'String',
        :'usage_history' => :'Array<CouponHistory>',
        :'additional_fields' => :'Object',
        :'custom_fields' => :'Object'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'initial_amount')
        self.initial_amount = attributes[:'initial_amount']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'avail_to')
        self.avail_to = attributes[:'avail_to']
      end

      if attributes.has_key?(:'free_product_ids')
        self.free_product_ids = attributes[:'free_product_ids']
      end

      if attributes.has_key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.has_key?(:'owner_email')
        self.owner_email = attributes[:'owner_email']
      end

      if attributes.has_key?(:'recipient_email')
        self.recipient_email = attributes[:'recipient_email']
      end

      if attributes.has_key?(:'owner_name')
        self.owner_name = attributes[:'owner_name']
      end

      if attributes.has_key?(:'recipient_name')
        self.recipient_name = attributes[:'recipient_name']
      end

      if attributes.has_key?(:'usage_history')
        if (value = attributes[:'usage_history']).is_a?(Array)
          self.usage_history = value
        end
      end

      if attributes.has_key?(:'additional_fields')
        self.additional_fields = attributes[:'additional_fields']
      end

      if attributes.has_key?(:'custom_fields')
        self.custom_fields = attributes[:'custom_fields']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          code == o.code &&
          name == o.name &&
          type == o.type &&
          currency_code == o.currency_code &&
          amount == o.amount &&
          initial_amount == o.initial_amount &&
          status == o.status &&
          created_at == o.created_at &&
          avail_to == o.avail_to &&
          free_product_ids == o.free_product_ids &&
          message == o.message &&
          owner_email == o.owner_email &&
          recipient_email == o.recipient_email &&
          owner_name == o.owner_name &&
          recipient_name == o.recipient_name &&
          usage_history == o.usage_history &&
          additional_fields == o.additional_fields &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, code, name, type, currency_code, amount, initial_amount, status, created_at, avail_to, free_product_ids, message, owner_email, recipient_email, owner_name, recipient_name, usage_history, additional_fields, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
