=begin
#Swagger API2Cart

#API2Cart

OpenAPI spec version: 1.1
Contact: contact@api2cart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require 'date'

module SwaggerClient

  class Customer
    attr_accessor :id

    attr_accessor :email

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :created_time

    attr_accessor :modified_time

    attr_accessor :group

    attr_accessor :login

    attr_accessor :last_login

    attr_accessor :birth_day

    attr_accessor :status

    attr_accessor :news_letter_subscription

    attr_accessor :gender

    attr_accessor :stores_ids

    attr_accessor :website

    attr_accessor :fax

    attr_accessor :company

    attr_accessor :phone

    attr_accessor :ip_address

    attr_accessor :address_book

    attr_accessor :orders_count

    attr_accessor :last_order_id

    attr_accessor :additional_fields

    attr_accessor :custom_fields


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'email' => :'email',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'created_time' => :'created_time',
        :'modified_time' => :'modified_time',
        :'group' => :'group',
        :'login' => :'login',
        :'last_login' => :'last_login',
        :'birth_day' => :'birth_day',
        :'status' => :'status',
        :'news_letter_subscription' => :'news_letter_subscription',
        :'gender' => :'gender',
        :'stores_ids' => :'stores_ids',
        :'website' => :'website',
        :'fax' => :'fax',
        :'company' => :'company',
        :'phone' => :'phone',
        :'ip_address' => :'ip_address',
        :'address_book' => :'address_book',
        :'orders_count' => :'orders_count',
        :'last_order_id' => :'last_order_id',
        :'additional_fields' => :'additional_fields',
        :'custom_fields' => :'custom_fields'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'email' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'created_time' => :'A2CDateTime',
        :'modified_time' => :'A2CDateTime',
        :'group' => :'Array<CustomerGroup>',
        :'login' => :'String',
        :'last_login' => :'A2CDateTime',
        :'birth_day' => :'A2CDateTime',
        :'status' => :'String',
        :'news_letter_subscription' => :'BOOLEAN',
        :'gender' => :'String',
        :'stores_ids' => :'Array<String>',
        :'website' => :'String',
        :'fax' => :'String',
        :'company' => :'String',
        :'phone' => :'String',
        :'ip_address' => :'String',
        :'address_book' => :'Array<CustomerAddress>',
        :'orders_count' => :'Integer',
        :'last_order_id' => :'String',
        :'additional_fields' => :'Object',
        :'custom_fields' => :'Object'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.has_key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.has_key?(:'created_time')
        self.created_time = attributes[:'created_time']
      end

      if attributes.has_key?(:'modified_time')
        self.modified_time = attributes[:'modified_time']
      end

      if attributes.has_key?(:'group')
        if (value = attributes[:'group']).is_a?(Array)
          self.group = value
        end
      end

      if attributes.has_key?(:'login')
        self.login = attributes[:'login']
      end

      if attributes.has_key?(:'last_login')
        self.last_login = attributes[:'last_login']
      end

      if attributes.has_key?(:'birth_day')
        self.birth_day = attributes[:'birth_day']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'news_letter_subscription')
        self.news_letter_subscription = attributes[:'news_letter_subscription']
      end

      if attributes.has_key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.has_key?(:'stores_ids')
        if (value = attributes[:'stores_ids']).is_a?(Array)
          self.stores_ids = value
        end
      end

      if attributes.has_key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.has_key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.has_key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'ip_address')
        self.ip_address = attributes[:'ip_address']
      end

      if attributes.has_key?(:'address_book')
        if (value = attributes[:'address_book']).is_a?(Array)
          self.address_book = value
        end
      end

      if attributes.has_key?(:'orders_count')
        self.orders_count = attributes[:'orders_count']
      end

      if attributes.has_key?(:'last_order_id')
        self.last_order_id = attributes[:'last_order_id']
      end

      if attributes.has_key?(:'additional_fields')
        self.additional_fields = attributes[:'additional_fields']
      end

      if attributes.has_key?(:'custom_fields')
        self.custom_fields = attributes[:'custom_fields']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          email == o.email &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          created_time == o.created_time &&
          modified_time == o.modified_time &&
          group == o.group &&
          login == o.login &&
          last_login == o.last_login &&
          birth_day == o.birth_day &&
          status == o.status &&
          news_letter_subscription == o.news_letter_subscription &&
          gender == o.gender &&
          stores_ids == o.stores_ids &&
          website == o.website &&
          fax == o.fax &&
          company == o.company &&
          phone == o.phone &&
          ip_address == o.ip_address &&
          address_book == o.address_book &&
          orders_count == o.orders_count &&
          last_order_id == o.last_order_id &&
          additional_fields == o.additional_fields &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, email, first_name, last_name, created_time, modified_time, group, login, last_login, birth_day, status, news_letter_subscription, gender, stores_ids, website, fax, company, phone, ip_address, address_book, orders_count, last_order_id, additional_fields, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
