=begin
#Swagger API2Cart

#API2Cart

OpenAPI spec version: 1.1
Contact: contact@api2cart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require 'date'

module SwaggerClient

  class ProductAdd
    # Defines product's name that has to be added
    attr_accessor :name

    # Defines product's model that has to be added
    attr_accessor :model

    # Defines product's description that has to be added
    attr_accessor :description

    # Defines product's price that has to be added
    attr_accessor :price

    # Defines product's sku that has to be added
    attr_accessor :sku

    # Defines product's model that has to be added
    attr_accessor :special_price

    # Defines the date of special price creation
    attr_accessor :sprice_create

    # Defines the date of special price modification
    attr_accessor :sprice_modified

    # Defines the term of special price offer duration
    attr_accessor :sprice_expire

    # Defines product's tier prices
    attr_accessor :tier_prices

    # Defines product's group prices
    attr_accessor :group_prices

    # Specifies the set of visible/invisible products for users
    attr_accessor :available_for_view

    # Specifies the set of visible/invisible products for sale
    attr_accessor :available_for_sale

    # Weight
    attr_accessor :weight

    # Weight Unit
    attr_accessor :weight_unit

    # Defines short description
    attr_accessor :short_description

    # This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
    attr_accessor :warehouse_id

    # Defines product's quantity that has to be added
    attr_accessor :quantity

    # Defines whether the product is downloadable
    attr_accessor :downloadable

    # Defines product's sale price
    attr_accessor :wholesale_price

    # Defines the date of entity creation
    attr_accessor :created_at

    # Defines product's manufacturer
    attr_accessor :manufacturer

    # Defines product add that is specified by comma-separated categories id
    attr_accessor :categories_ids

    # Defines tax classes where entity has to be added
    attr_accessor :tax_class_id

    # Defines product's type
    attr_accessor :type

    # Defines unique meta title for each entity
    attr_accessor :meta_title

    # Defines unique meta keywords for each entity
    attr_accessor :meta_keywords

    # Defines unique meta description of a entity
    attr_accessor :meta_description

    # Defines unique product's URL
    attr_accessor :url

    # Language id
    attr_accessor :lang_id

    # Assign product to the stores that is specified by comma-separated stores' id
    attr_accessor :stores_ids

    # Specifies the number of product's reviews
    attr_accessor :viewed_count

    # Defines how many times the product was ordered
    attr_accessor :ordered_count

    # Defines product’s attribute set name in Magento
    attr_accessor :attribute_set_name

    # Defines product’s attribute name separated with a comma in Magento
    attr_accessor :attribute_name

    # The numeric ID of the shipping template associated with the products in Etsy.
    attr_accessor :shipping_template_id

    # The human-readable label for the condition (e.g., \"New\").
    attr_accessor :condition

    # Describes the number of days the seller wants the listing to be active. Look at cart.info method response for allowed values.
    attr_accessor :listing_duration

    # Indicates the selling format of the eBay listing.
    attr_accessor :listing_type

    # Identifies the payment method (such as PayPal) that the seller will accept when the buyer pays for the item. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">payment_methods[0] = string</br>payment_methods[1] = string</br></code></div></div>
    attr_accessor :payment_methods

    # Indicates whether the seller allows the buyer to return the item.
    attr_accessor :return_accepted

    # The shipping details, including flat and calculated shipping costs and shipping insurance costs. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">shipping_details[0][<b>shipping_type</b>] = string </br>shipping_details[0][<b>shipping_service</b>] = string</br>shipping_details[0][<b>shipping_cost</b>] = decimal</br>shipping_details[1][<b>shipping_type</b>] = string </br>shipping_details[1][<b>shipping_service</b>] = string</br>shipping_details[1][<b>shipping_cost</b>] = decimal</br></code></div></div>
    attr_accessor :shipping_details

    # Valid PayPal email address for the PayPal account that the seller will use if they offer PayPal as a payment method for the listing.
    attr_accessor :paypal_email

    attr_accessor :seller_profiles

    # If the seller is subscribed to \"Business Policies\", use the seller_profiles instead of the shipping_details, payment_methods and return_accepted params.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">package_details[<b>measure_unit</b>] = string</br> Allowed measure_unit values: [English or Metric] </br> Default: Metric</br>package_details[<b>weigh_unit</b>] = string</br> Allowed weigh_unit values: [kg, g, lbs, oz]</br>package_details[<b>package_depth</b>] = decimal</br>package_details[<b>package_length</b>] = decimal</br>package_details[<b>package_width</b>] = decimal</br>package_details[<b>weight_major</b>] = decimal</br>package_details[<b>weight_minor</b>] = decimal</br>package_details[<b>shipping_package</b>] = string</br> See cart.info method, param `eBay_shipping_package_details`</code></div></div>
    attr_accessor :package_details

    # The price at which Best Offers are automatically accepted.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">best_offer[<b>minimum_offer_price</b>] = decimal</br>best_offer[<b>auto_accept_price</b>] = decimal</br></code></div></div>
    attr_accessor :best_offer

    # Percent of an item's price to be charged as the sales tax for the order. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">sales_tax[<b>tax_percent</b>] = decimal (##.###)</br>sales_tax[<b>tax_state</b>] = string</br>sales_tax[<b>shipping_inc_in_tax</b>] = bool</br></code></div></div>
    attr_accessor :sales_tax

    # Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
    attr_accessor :upc

    # European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
    attr_accessor :ean

    # International Standard Book Number. An ISBN is a unique identifier for books.
    attr_accessor :isbn

    # An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.         <hr>         <div style=\"font-style:normal\">Param structure:           <div style=\"margin-left: 2%;\">             <code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">               specifics[int][<b>name</b>] = string</br>               specifics[int][<b>value</b>] = string</br>             </code>           </div>         </div>
    attr_accessor :specifics

    # Image Url
    attr_accessor :image_url

    # Defines image's name
    attr_accessor :image_name

    # Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.
    attr_accessor :avail_from

    # Product tags
    attr_accessor :tags

    # Is cache clear required
    attr_accessor :clear_cache

    # Global Trade Item Number. An GTIN is an identifier for trade items.
    attr_accessor :gtin


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'model' => :'model',
        :'description' => :'description',
        :'price' => :'price',
        :'sku' => :'sku',
        :'special_price' => :'special_price',
        :'sprice_create' => :'sprice_create',
        :'sprice_modified' => :'sprice_modified',
        :'sprice_expire' => :'sprice_expire',
        :'tier_prices' => :'tier_prices',
        :'group_prices' => :'group_prices',
        :'available_for_view' => :'available_for_view',
        :'available_for_sale' => :'available_for_sale',
        :'weight' => :'weight',
        :'weight_unit' => :'weight_unit',
        :'short_description' => :'short_description',
        :'warehouse_id' => :'warehouse_id',
        :'quantity' => :'quantity',
        :'downloadable' => :'downloadable',
        :'wholesale_price' => :'wholesale_price',
        :'created_at' => :'created_at',
        :'manufacturer' => :'manufacturer',
        :'categories_ids' => :'categories_ids',
        :'tax_class_id' => :'tax_class_id',
        :'type' => :'type',
        :'meta_title' => :'meta_title',
        :'meta_keywords' => :'meta_keywords',
        :'meta_description' => :'meta_description',
        :'url' => :'url',
        :'lang_id' => :'lang_id',
        :'stores_ids' => :'stores_ids',
        :'viewed_count' => :'viewed_count',
        :'ordered_count' => :'ordered_count',
        :'attribute_set_name' => :'attribute_set_name',
        :'attribute_name' => :'attribute_name',
        :'shipping_template_id' => :'shipping_template_id',
        :'condition' => :'condition',
        :'listing_duration' => :'listing_duration',
        :'listing_type' => :'listing_type',
        :'payment_methods' => :'payment_methods',
        :'return_accepted' => :'return_accepted',
        :'shipping_details' => :'shipping_details',
        :'paypal_email' => :'paypal_email',
        :'seller_profiles' => :'seller_profiles',
        :'package_details' => :'package_details',
        :'best_offer' => :'best_offer',
        :'sales_tax' => :'sales_tax',
        :'upc' => :'upc',
        :'ean' => :'ean',
        :'isbn' => :'isbn',
        :'specifics' => :'specifics',
        :'image_url' => :'image_url',
        :'image_name' => :'image_name',
        :'avail_from' => :'avail_from',
        :'tags' => :'tags',
        :'clear_cache' => :'clear_cache',
        :'gtin' => :'gtin'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'model' => :'String',
        :'description' => :'String',
        :'price' => :'Float',
        :'sku' => :'String',
        :'special_price' => :'Float',
        :'sprice_create' => :'String',
        :'sprice_modified' => :'String',
        :'sprice_expire' => :'String',
        :'tier_prices' => :'Array<ProductAddTierPrices>',
        :'group_prices' => :'Array<ProductAddGroupPrices>',
        :'available_for_view' => :'BOOLEAN',
        :'available_for_sale' => :'BOOLEAN',
        :'weight' => :'Float',
        :'weight_unit' => :'String',
        :'short_description' => :'String',
        :'warehouse_id' => :'String',
        :'quantity' => :'Float',
        :'downloadable' => :'BOOLEAN',
        :'wholesale_price' => :'Float',
        :'created_at' => :'String',
        :'manufacturer' => :'String',
        :'categories_ids' => :'String',
        :'tax_class_id' => :'Integer',
        :'type' => :'String',
        :'meta_title' => :'String',
        :'meta_keywords' => :'String',
        :'meta_description' => :'String',
        :'url' => :'String',
        :'lang_id' => :'String',
        :'stores_ids' => :'String',
        :'viewed_count' => :'Integer',
        :'ordered_count' => :'Integer',
        :'attribute_set_name' => :'String',
        :'attribute_name' => :'String',
        :'shipping_template_id' => :'Integer',
        :'condition' => :'String',
        :'listing_duration' => :'String',
        :'listing_type' => :'String',
        :'payment_methods' => :'Array<String>',
        :'return_accepted' => :'BOOLEAN',
        :'shipping_details' => :'Array<ProductAddShippingDetails>',
        :'paypal_email' => :'String',
        :'seller_profiles' => :'ProductAddSellerProfiles',
        :'package_details' => :'Array<String>',
        :'best_offer' => :'Array<String>',
        :'sales_tax' => :'Array<String>',
        :'upc' => :'String',
        :'ean' => :'String',
        :'isbn' => :'String',
        :'specifics' => :'Array<String>',
        :'image_url' => :'String',
        :'image_name' => :'String',
        :'avail_from' => :'String',
        :'tags' => :'String',
        :'clear_cache' => :'BOOLEAN',
        :'gtin' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.has_key?(:'special_price')
        self.special_price = attributes[:'special_price']
      end

      if attributes.has_key?(:'sprice_create')
        self.sprice_create = attributes[:'sprice_create']
      end

      if attributes.has_key?(:'sprice_modified')
        self.sprice_modified = attributes[:'sprice_modified']
      end

      if attributes.has_key?(:'sprice_expire')
        self.sprice_expire = attributes[:'sprice_expire']
      end

      if attributes.has_key?(:'tier_prices')
        if (value = attributes[:'tier_prices']).is_a?(Array)
          self.tier_prices = value
        end
      end

      if attributes.has_key?(:'group_prices')
        if (value = attributes[:'group_prices']).is_a?(Array)
          self.group_prices = value
        end
      end

      if attributes.has_key?(:'available_for_view')
        self.available_for_view = attributes[:'available_for_view']
      else
        self.available_for_view = true
      end

      if attributes.has_key?(:'available_for_sale')
        self.available_for_sale = attributes[:'available_for_sale']
      else
        self.available_for_sale = true
      end

      if attributes.has_key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.has_key?(:'weight_unit')
        self.weight_unit = attributes[:'weight_unit']
      end

      if attributes.has_key?(:'short_description')
        self.short_description = attributes[:'short_description']
      end

      if attributes.has_key?(:'warehouse_id')
        self.warehouse_id = attributes[:'warehouse_id']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'downloadable')
        self.downloadable = attributes[:'downloadable']
      else
        self.downloadable = false
      end

      if attributes.has_key?(:'wholesale_price')
        self.wholesale_price = attributes[:'wholesale_price']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'manufacturer')
        self.manufacturer = attributes[:'manufacturer']
      end

      if attributes.has_key?(:'categories_ids')
        self.categories_ids = attributes[:'categories_ids']
      end

      if attributes.has_key?(:'tax_class_id')
        self.tax_class_id = attributes[:'tax_class_id']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = "simple"
      end

      if attributes.has_key?(:'meta_title')
        self.meta_title = attributes[:'meta_title']
      end

      if attributes.has_key?(:'meta_keywords')
        self.meta_keywords = attributes[:'meta_keywords']
      end

      if attributes.has_key?(:'meta_description')
        self.meta_description = attributes[:'meta_description']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'lang_id')
        self.lang_id = attributes[:'lang_id']
      end

      if attributes.has_key?(:'stores_ids')
        self.stores_ids = attributes[:'stores_ids']
      else
        self.stores_ids = "0"
      end

      if attributes.has_key?(:'viewed_count')
        self.viewed_count = attributes[:'viewed_count']
      end

      if attributes.has_key?(:'ordered_count')
        self.ordered_count = attributes[:'ordered_count']
      end

      if attributes.has_key?(:'attribute_set_name')
        self.attribute_set_name = attributes[:'attribute_set_name']
      else
        self.attribute_set_name = "Default"
      end

      if attributes.has_key?(:'attribute_name')
        self.attribute_name = attributes[:'attribute_name']
      end

      if attributes.has_key?(:'shipping_template_id')
        self.shipping_template_id = attributes[:'shipping_template_id']
      end

      if attributes.has_key?(:'condition')
        self.condition = attributes[:'condition']
      end

      if attributes.has_key?(:'listing_duration')
        self.listing_duration = attributes[:'listing_duration']
      end

      if attributes.has_key?(:'listing_type')
        self.listing_type = attributes[:'listing_type']
      else
        self.listing_type = "FixedPrice"
      end

      if attributes.has_key?(:'payment_methods')
        if (value = attributes[:'payment_methods']).is_a?(Array)
          self.payment_methods = value
        end
      end

      if attributes.has_key?(:'return_accepted')
        self.return_accepted = attributes[:'return_accepted']
      end

      if attributes.has_key?(:'shipping_details')
        if (value = attributes[:'shipping_details']).is_a?(Array)
          self.shipping_details = value
        end
      end

      if attributes.has_key?(:'paypal_email')
        self.paypal_email = attributes[:'paypal_email']
      end

      if attributes.has_key?(:'seller_profiles')
        self.seller_profiles = attributes[:'seller_profiles']
      end

      if attributes.has_key?(:'package_details')
        if (value = attributes[:'package_details']).is_a?(Array)
          self.package_details = value
        end
      end

      if attributes.has_key?(:'best_offer')
        if (value = attributes[:'best_offer']).is_a?(Array)
          self.best_offer = value
        end
      end

      if attributes.has_key?(:'sales_tax')
        if (value = attributes[:'sales_tax']).is_a?(Array)
          self.sales_tax = value
        end
      end

      if attributes.has_key?(:'upc')
        self.upc = attributes[:'upc']
      end

      if attributes.has_key?(:'ean')
        self.ean = attributes[:'ean']
      end

      if attributes.has_key?(:'isbn')
        self.isbn = attributes[:'isbn']
      end

      if attributes.has_key?(:'specifics')
        if (value = attributes[:'specifics']).is_a?(Array)
          self.specifics = value
        end
      end

      if attributes.has_key?(:'image_url')
        self.image_url = attributes[:'image_url']
      end

      if attributes.has_key?(:'image_name')
        self.image_name = attributes[:'image_name']
      end

      if attributes.has_key?(:'avail_from')
        self.avail_from = attributes[:'avail_from']
      end

      if attributes.has_key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.has_key?(:'clear_cache')
        self.clear_cache = attributes[:'clear_cache']
      else
        self.clear_cache = true
      end

      if attributes.has_key?(:'gtin')
        self.gtin = attributes[:'gtin']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if @model.nil?
        invalid_properties.push("invalid value for 'model', model cannot be nil.")
      end

      if @description.nil?
        invalid_properties.push("invalid value for 'description', description cannot be nil.")
      end

      if @price.nil?
        invalid_properties.push("invalid value for 'price', price cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @model.nil?
      return false if @description.nil?
      return false if @price.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          model == o.model &&
          description == o.description &&
          price == o.price &&
          sku == o.sku &&
          special_price == o.special_price &&
          sprice_create == o.sprice_create &&
          sprice_modified == o.sprice_modified &&
          sprice_expire == o.sprice_expire &&
          tier_prices == o.tier_prices &&
          group_prices == o.group_prices &&
          available_for_view == o.available_for_view &&
          available_for_sale == o.available_for_sale &&
          weight == o.weight &&
          weight_unit == o.weight_unit &&
          short_description == o.short_description &&
          warehouse_id == o.warehouse_id &&
          quantity == o.quantity &&
          downloadable == o.downloadable &&
          wholesale_price == o.wholesale_price &&
          created_at == o.created_at &&
          manufacturer == o.manufacturer &&
          categories_ids == o.categories_ids &&
          tax_class_id == o.tax_class_id &&
          type == o.type &&
          meta_title == o.meta_title &&
          meta_keywords == o.meta_keywords &&
          meta_description == o.meta_description &&
          url == o.url &&
          lang_id == o.lang_id &&
          stores_ids == o.stores_ids &&
          viewed_count == o.viewed_count &&
          ordered_count == o.ordered_count &&
          attribute_set_name == o.attribute_set_name &&
          attribute_name == o.attribute_name &&
          shipping_template_id == o.shipping_template_id &&
          condition == o.condition &&
          listing_duration == o.listing_duration &&
          listing_type == o.listing_type &&
          payment_methods == o.payment_methods &&
          return_accepted == o.return_accepted &&
          shipping_details == o.shipping_details &&
          paypal_email == o.paypal_email &&
          seller_profiles == o.seller_profiles &&
          package_details == o.package_details &&
          best_offer == o.best_offer &&
          sales_tax == o.sales_tax &&
          upc == o.upc &&
          ean == o.ean &&
          isbn == o.isbn &&
          specifics == o.specifics &&
          image_url == o.image_url &&
          image_name == o.image_name &&
          avail_from == o.avail_from &&
          tags == o.tags &&
          clear_cache == o.clear_cache &&
          gtin == o.gtin
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, model, description, price, sku, special_price, sprice_create, sprice_modified, sprice_expire, tier_prices, group_prices, available_for_view, available_for_sale, weight, weight_unit, short_description, warehouse_id, quantity, downloadable, wholesale_price, created_at, manufacturer, categories_ids, tax_class_id, type, meta_title, meta_keywords, meta_description, url, lang_id, stores_ids, viewed_count, ordered_count, attribute_set_name, attribute_name, shipping_template_id, condition, listing_duration, listing_type, payment_methods, return_accepted, shipping_details, paypal_email, seller_profiles, package_details, best_offer, sales_tax, upc, ean, isbn, specifics, image_url, image_name, avail_from, tags, clear_cache, gtin].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
