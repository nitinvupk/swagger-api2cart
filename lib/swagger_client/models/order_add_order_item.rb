=begin
#Swagger API2Cart

#API2Cart

OpenAPI spec version: 1.1
Contact: contact@api2cart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require 'date'

module SwaggerClient

  class OrderAddOrderItem
    # Defines orders specified by order item id
    attr_accessor :order_item_id

    # Defines orders specified by order item name
    attr_accessor :order_item_name

    # Defines orders specified by order item model
    attr_accessor :order_item_model

    # Defines orders specified by order item price
    attr_accessor :order_item_price

    # Defines orders specified by order item quantity
    attr_accessor :order_item_quantity

    # Ordered product variant. Where x is order item ID
    attr_accessor :order_item_variant_id

    # Percentage of tax for product order
    attr_accessor :order_item_tax

    # Index of the parent grouped/bundle product
    attr_accessor :order_item_parent

    # Option name of the parent grouped/bundle product
    attr_accessor :order_item_parent_option_name

    # Indicates whether subitems of the grouped/bundle product can be refunded separately
    attr_accessor :order_item_allow_refund_items_separately

    # Indicates whether subitems of the grouped/bundle product can be shipped separately
    attr_accessor :order_item_allow_ship_items_separately

    # Defines if item price includes tax
    attr_accessor :order_item_price_includes_tax

    attr_accessor :order_item_option

    attr_accessor :order_item_property


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'order_item_id' => :'order_item_id',
        :'order_item_name' => :'order_item_name',
        :'order_item_model' => :'order_item_model',
        :'order_item_price' => :'order_item_price',
        :'order_item_quantity' => :'order_item_quantity',
        :'order_item_variant_id' => :'order_item_variant_id',
        :'order_item_tax' => :'order_item_tax',
        :'order_item_parent' => :'order_item_parent',
        :'order_item_parent_option_name' => :'order_item_parent_option_name',
        :'order_item_allow_refund_items_separately' => :'order_item_allow_refund_items_separately',
        :'order_item_allow_ship_items_separately' => :'order_item_allow_ship_items_separately',
        :'order_item_price_includes_tax' => :'order_item_price_includes_tax',
        :'order_item_option' => :'order_item_option',
        :'order_item_property' => :'order_item_property'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'order_item_id' => :'String',
        :'order_item_name' => :'String',
        :'order_item_model' => :'String',
        :'order_item_price' => :'Float',
        :'order_item_quantity' => :'Integer',
        :'order_item_variant_id' => :'String',
        :'order_item_tax' => :'Float',
        :'order_item_parent' => :'Integer',
        :'order_item_parent_option_name' => :'String',
        :'order_item_allow_refund_items_separately' => :'BOOLEAN',
        :'order_item_allow_ship_items_separately' => :'BOOLEAN',
        :'order_item_price_includes_tax' => :'BOOLEAN',
        :'order_item_option' => :'Array<OrderAddOrderItemOption>',
        :'order_item_property' => :'Array<OrderAddOrderItemProperty>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'order_item_id')
        self.order_item_id = attributes[:'order_item_id']
      end

      if attributes.has_key?(:'order_item_name')
        self.order_item_name = attributes[:'order_item_name']
      end

      if attributes.has_key?(:'order_item_model')
        self.order_item_model = attributes[:'order_item_model']
      end

      if attributes.has_key?(:'order_item_price')
        self.order_item_price = attributes[:'order_item_price']
      end

      if attributes.has_key?(:'order_item_quantity')
        self.order_item_quantity = attributes[:'order_item_quantity']
      end

      if attributes.has_key?(:'order_item_variant_id')
        self.order_item_variant_id = attributes[:'order_item_variant_id']
      end

      if attributes.has_key?(:'order_item_tax')
        self.order_item_tax = attributes[:'order_item_tax']
      end

      if attributes.has_key?(:'order_item_parent')
        self.order_item_parent = attributes[:'order_item_parent']
      end

      if attributes.has_key?(:'order_item_parent_option_name')
        self.order_item_parent_option_name = attributes[:'order_item_parent_option_name']
      end

      if attributes.has_key?(:'order_item_allow_refund_items_separately')
        self.order_item_allow_refund_items_separately = attributes[:'order_item_allow_refund_items_separately']
      end

      if attributes.has_key?(:'order_item_allow_ship_items_separately')
        self.order_item_allow_ship_items_separately = attributes[:'order_item_allow_ship_items_separately']
      end

      if attributes.has_key?(:'order_item_price_includes_tax')
        self.order_item_price_includes_tax = attributes[:'order_item_price_includes_tax']
      else
        self.order_item_price_includes_tax = false
      end

      if attributes.has_key?(:'order_item_option')
        if (value = attributes[:'order_item_option']).is_a?(Array)
          self.order_item_option = value
        end
      end

      if attributes.has_key?(:'order_item_property')
        if (value = attributes[:'order_item_property']).is_a?(Array)
          self.order_item_property = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @order_item_id.nil?
        invalid_properties.push("invalid value for 'order_item_id', order_item_id cannot be nil.")
      end

      if @order_item_name.nil?
        invalid_properties.push("invalid value for 'order_item_name', order_item_name cannot be nil.")
      end

      if @order_item_model.nil?
        invalid_properties.push("invalid value for 'order_item_model', order_item_model cannot be nil.")
      end

      if @order_item_price.nil?
        invalid_properties.push("invalid value for 'order_item_price', order_item_price cannot be nil.")
      end

      if @order_item_quantity.nil?
        invalid_properties.push("invalid value for 'order_item_quantity', order_item_quantity cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @order_item_id.nil?
      return false if @order_item_name.nil?
      return false if @order_item_model.nil?
      return false if @order_item_price.nil?
      return false if @order_item_quantity.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          order_item_id == o.order_item_id &&
          order_item_name == o.order_item_name &&
          order_item_model == o.order_item_model &&
          order_item_price == o.order_item_price &&
          order_item_quantity == o.order_item_quantity &&
          order_item_variant_id == o.order_item_variant_id &&
          order_item_tax == o.order_item_tax &&
          order_item_parent == o.order_item_parent &&
          order_item_parent_option_name == o.order_item_parent_option_name &&
          order_item_allow_refund_items_separately == o.order_item_allow_refund_items_separately &&
          order_item_allow_ship_items_separately == o.order_item_allow_ship_items_separately &&
          order_item_price_includes_tax == o.order_item_price_includes_tax &&
          order_item_option == o.order_item_option &&
          order_item_property == o.order_item_property
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [order_item_id, order_item_name, order_item_model, order_item_price, order_item_quantity, order_item_variant_id, order_item_tax, order_item_parent, order_item_parent_option_name, order_item_allow_refund_items_separately, order_item_allow_ship_items_separately, order_item_price_includes_tax, order_item_option, order_item_property].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
