=begin
#Swagger API2Cart

#API2Cart

OpenAPI spec version: 1.1
Contact: contact@api2cart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module SwaggerClient
  class WebhookApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Count registered webhooks on the store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity The entity you want to filter webhooks by (e.g. order or product)
    # @option opts [String] :action The action you want to filter webhooks by (e.g. order or product)
    # @option opts [BOOLEAN] :active The webhook status you want to filter webhooks by
    # @return [InlineResponse2002]
    def webhook_count(opts = {})
      data, _status_code, _headers = webhook_count_with_http_info(opts)
      return data
    end

    # 
    # Count registered webhooks on the store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity The entity you want to filter webhooks by (e.g. order or product)
    # @option opts [String] :action The action you want to filter webhooks by (e.g. order or product)
    # @option opts [BOOLEAN] :active The webhook status you want to filter webhooks by
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def webhook_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhookApi.webhook_count ..."
      end
      # resource path
      local_var_path = "/webhook.count.json"

      # query parameters
      query_params = {}
      query_params[:'entity'] = opts[:'entity'] if !opts[:'entity'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#webhook_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create webhook on the store and subscribe to it.
    # @param entity Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)
    # @param action Specify what action (event) will trigger the webhook (e.g add, delete, or update)
    # @param callback Callback where the webhook should send the POST request when the event occurs
    # @param [Hash] opts the optional parameters
    # @option opts [String] :label The name you give to the webhook
    # @option opts [String] :fields Fields the webhook should send (default to id)
    # @option opts [BOOLEAN] :active Webhook status (default to true)
    # @option opts [String] :store_id Defines store id where the webhook should be assigned
    # @return [InlineResponse200]
    def webhook_create(entity, action, callback, opts = {})
      data, _status_code, _headers = webhook_create_with_http_info(entity, action, callback, opts)
      return data
    end

    # 
    # Create webhook on the store and subscribe to it.
    # @param entity Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)
    # @param action Specify what action (event) will trigger the webhook (e.g add, delete, or update)
    # @param callback Callback where the webhook should send the POST request when the event occurs
    # @param [Hash] opts the optional parameters
    # @option opts [String] :label The name you give to the webhook
    # @option opts [String] :fields Fields the webhook should send
    # @option opts [BOOLEAN] :active Webhook status
    # @option opts [String] :store_id Defines store id where the webhook should be assigned
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def webhook_create_with_http_info(entity, action, callback, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhookApi.webhook_create ..."
      end
      # verify the required parameter 'entity' is set
      if @api_client.config.client_side_validation && entity.nil?
        fail ArgumentError, "Missing the required parameter 'entity' when calling WebhookApi.webhook_create"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling WebhookApi.webhook_create"
      end
      # verify the required parameter 'callback' is set
      if @api_client.config.client_side_validation && callback.nil?
        fail ArgumentError, "Missing the required parameter 'callback' when calling WebhookApi.webhook_create"
      end
      # resource path
      local_var_path = "/webhook.create.json"

      # query parameters
      query_params = {}
      query_params[:'entity'] = entity
      query_params[:'action'] = action
      query_params[:'callback'] = callback
      query_params[:'label'] = opts[:'label'] if !opts[:'label'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#webhook_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete registered webhook on the store.
    # @param id Webhook id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def webhook_delete(id, opts = {})
      data, _status_code, _headers = webhook_delete_with_http_info(id, opts)
      return data
    end

    # 
    # Delete registered webhook on the store.
    # @param id Webhook id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def webhook_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhookApi.webhook_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WebhookApi.webhook_delete"
      end
      # resource path
      local_var_path = "/webhook.delete.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#webhook_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List all Webhooks that are available on this store.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def webhook_events(opts = {})
      data, _status_code, _headers = webhook_events_with_http_info(opts)
      return data
    end

    # 
    # List all Webhooks that are available on this store.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def webhook_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhookApi.webhook_events ..."
      end
      # resource path
      local_var_path = "/webhook.events.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#webhook_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List registered webhook on the store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,entity,action,callback)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :entity The entity you want to filter webhooks by (e.g. order or product)
    # @option opts [String] :action The action you want to filter webhooks by (e.g. add, update, or delete)
    # @option opts [BOOLEAN] :active The webhook status you want to filter webhooks by
    # @option opts [String] :ids List of сomma-separated webhook ids
    # @return [InlineResponse2001]
    def webhook_list(opts = {})
      data, _status_code, _headers = webhook_list_with_http_info(opts)
      return data
    end

    # 
    # List registered webhook on the store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :entity The entity you want to filter webhooks by (e.g. order or product)
    # @option opts [String] :action The action you want to filter webhooks by (e.g. add, update, or delete)
    # @option opts [BOOLEAN] :active The webhook status you want to filter webhooks by
    # @option opts [String] :ids List of сomma-separated webhook ids
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def webhook_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhookApi.webhook_list ..."
      end
      # resource path
      local_var_path = "/webhook.list.json"

      # query parameters
      query_params = {}
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'entity'] = opts[:'entity'] if !opts[:'entity'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#webhook_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update Webhooks parameters.
    # @param id Webhook id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback Callback where the webhook should send the POST request when the event occurs
    # @option opts [String] :label The name you give to the webhook
    # @option opts [String] :fields Fields the webhook should send
    # @option opts [BOOLEAN] :active Webhook status
    # @return [InlineResponse2005]
    def webhook_update(id, opts = {})
      data, _status_code, _headers = webhook_update_with_http_info(id, opts)
      return data
    end

    # 
    # Update Webhooks parameters.
    # @param id Webhook id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback Callback where the webhook should send the POST request when the event occurs
    # @option opts [String] :label The name you give to the webhook
    # @option opts [String] :fields Fields the webhook should send
    # @option opts [BOOLEAN] :active Webhook status
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def webhook_update_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhookApi.webhook_update ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WebhookApi.webhook_update"
      end
      # resource path
      local_var_path = "/webhook.update.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'callback'] = opts[:'callback'] if !opts[:'callback'].nil?
      query_params[:'label'] = opts[:'label'] if !opts[:'label'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'active'] = opts[:'active'] if !opts[:'active'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhookApi#webhook_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
