=begin
#Swagger API2Cart

#API2Cart

OpenAPI spec version: 1.1
Contact: contact@api2cart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module SwaggerClient
  class AccountApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Add store to the account
    # @param cart_id Store’s identifier which you can get from cart_list method
    # @param store_url A web address of a store that you would like to connect to API2Cart
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
    # @option opts [String] :store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter)
    # @option opts [String] :store_key Set this parameter if bridge is already uploaded to store
    # @option opts [BOOLEAN] :validate_version Specify if api2cart should validate cart version (default to false)
    # @option opts [BOOLEAN] :verify Enables or disables cart&#39;s verification (default to true)
    # @option opts [String] :db_tables_prefix This parameter is deprecated for this method. Please, use this parameter in method account.config.update
    # @option opts [String] :ftp_host FTP connection host
    # @option opts [String] :ftp_user FTP User
    # @option opts [String] :ftp_password FTP Password
    # @option opts [Integer] :ftp_port FTP Port (default to 21)
    # @option opts [String] :ftp_store_dir FTP Store dir (default to /)
    # @option opts [String] :_3dcartapi_api_key 3DCart API Key
    # @option opts [String] :amazon_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :amazon_seller_id Seller Id
    # @option opts [String] :amazon_marketplaces_ids Comma separated marketplaces ids
    # @option opts [String] :amazon_secret_key Amazon Secret Key
    # @option opts [String] :amazon_access_key_id Amazon Secret Key Id
    # @option opts [String] :aspdotnetstorefront_api_user It&#39;s a AspDotNetStorefront account for which API is available
    # @option opts [String] :aspdotnetstorefront_api_pass AspDotNetStorefront API Password
    # @option opts [String] :bigcommerceapi_admin_account It&#39;s a BigCommerce account for which API is enabled
    # @option opts [String] :bigcommerceapi_api_path BigCommerce API URL
    # @option opts [String] :bigcommerceapi_api_key Bigcommerce API Key
    # @option opts [String] :bigcommerceapi_client_id Client ID of the requesting app
    # @option opts [String] :bigcommerceapi_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :bigcommerceapi_context API Path section unique to the store
    # @option opts [String] :demandware_client_id Demandware client id
    # @option opts [String] :demandware_api_password Demandware api password
    # @option opts [String] :demandware_user_name Demandware user name
    # @option opts [String] :demandware_user_password Demandware user password
    # @option opts [String] :demandware_env_type Demandware environment (default to production)
    # @option opts [String] :ebay_client_id Application ID (AppID).
    # @option opts [String] :ebay_client_secret Shared Secret from eBay application
    # @option opts [String] :ebay_runame The RuName value that eBay assigns to your application.
    # @option opts [String] :ebay_access_token Used to authenticate API requests.
    # @option opts [String] :ebay_refresh_token Used to renew the access token.
    # @option opts [String] :ebay_environment eBay environment (default to production)
    # @option opts [Integer] :ebay_site_id eBay global ID (default to 0)
    # @option opts [String] :walmart_client_id Walmart client ID
    # @option opts [String] :walmart_client_secret Walmart client secret
    # @option opts [String] :ecwid_acess_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :ecwid_store_id Store Id
    # @option opts [String] :etsy_keystring Etsy keystring
    # @option opts [String] :etsy_shared_secret Etsy shared secret
    # @option opts [String] :etsy_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :etsy_token_secret Secret token authorizing the app to access resources on behalf of a user
    # @option opts [String] :neto_api_key Neto API Key
    # @option opts [String] :neto_api_username Neto User Name
    # @option opts [String] :shopify_api_key Shopify API Key
    # @option opts [String] :shopify_api_password Shopify API Password
    # @option opts [String] :shopify_shared_secret Shared secret
    # @option opts [String] :shopify_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :volusion_login It&#39;s a Volusion account for which API is enabled
    # @option opts [String] :volusion_password Volusion API Password
    # @option opts [String] :hybris_client_id Omni Commerce Connector Client ID
    # @option opts [String] :hybris_client_secret Omni Commerce Connector Client Secret
    # @option opts [String] :squarespace_api_key Squarespace API Key
    # @return [InlineResponse2006]
    def account_cart_add(cart_id, store_url, opts = {})
      data, _status_code, _headers = account_cart_add_with_http_info(cart_id, store_url, opts)
      return data
    end

    # 
    # Add store to the account
    # @param cart_id Store’s identifier which you can get from cart_list method
    # @param store_url A web address of a store that you would like to connect to API2Cart
    # @param [Hash] opts the optional parameters
    # @option opts [String] :bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
    # @option opts [String] :store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter)
    # @option opts [String] :store_key Set this parameter if bridge is already uploaded to store
    # @option opts [BOOLEAN] :validate_version Specify if api2cart should validate cart version
    # @option opts [BOOLEAN] :verify Enables or disables cart&#39;s verification
    # @option opts [String] :db_tables_prefix This parameter is deprecated for this method. Please, use this parameter in method account.config.update
    # @option opts [String] :ftp_host FTP connection host
    # @option opts [String] :ftp_user FTP User
    # @option opts [String] :ftp_password FTP Password
    # @option opts [Integer] :ftp_port FTP Port
    # @option opts [String] :ftp_store_dir FTP Store dir
    # @option opts [String] :_3dcartapi_api_key 3DCart API Key
    # @option opts [String] :amazon_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :amazon_seller_id Seller Id
    # @option opts [String] :amazon_marketplaces_ids Comma separated marketplaces ids
    # @option opts [String] :amazon_secret_key Amazon Secret Key
    # @option opts [String] :amazon_access_key_id Amazon Secret Key Id
    # @option opts [String] :aspdotnetstorefront_api_user It&#39;s a AspDotNetStorefront account for which API is available
    # @option opts [String] :aspdotnetstorefront_api_pass AspDotNetStorefront API Password
    # @option opts [String] :bigcommerceapi_admin_account It&#39;s a BigCommerce account for which API is enabled
    # @option opts [String] :bigcommerceapi_api_path BigCommerce API URL
    # @option opts [String] :bigcommerceapi_api_key Bigcommerce API Key
    # @option opts [String] :bigcommerceapi_client_id Client ID of the requesting app
    # @option opts [String] :bigcommerceapi_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :bigcommerceapi_context API Path section unique to the store
    # @option opts [String] :demandware_client_id Demandware client id
    # @option opts [String] :demandware_api_password Demandware api password
    # @option opts [String] :demandware_user_name Demandware user name
    # @option opts [String] :demandware_user_password Demandware user password
    # @option opts [String] :demandware_env_type Demandware environment
    # @option opts [String] :ebay_client_id Application ID (AppID).
    # @option opts [String] :ebay_client_secret Shared Secret from eBay application
    # @option opts [String] :ebay_runame The RuName value that eBay assigns to your application.
    # @option opts [String] :ebay_access_token Used to authenticate API requests.
    # @option opts [String] :ebay_refresh_token Used to renew the access token.
    # @option opts [String] :ebay_environment eBay environment
    # @option opts [Integer] :ebay_site_id eBay global ID
    # @option opts [String] :walmart_client_id Walmart client ID
    # @option opts [String] :walmart_client_secret Walmart client secret
    # @option opts [String] :ecwid_acess_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :ecwid_store_id Store Id
    # @option opts [String] :etsy_keystring Etsy keystring
    # @option opts [String] :etsy_shared_secret Etsy shared secret
    # @option opts [String] :etsy_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :etsy_token_secret Secret token authorizing the app to access resources on behalf of a user
    # @option opts [String] :neto_api_key Neto API Key
    # @option opts [String] :neto_api_username Neto User Name
    # @option opts [String] :shopify_api_key Shopify API Key
    # @option opts [String] :shopify_api_password Shopify API Password
    # @option opts [String] :shopify_shared_secret Shared secret
    # @option opts [String] :shopify_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :volusion_login It&#39;s a Volusion account for which API is enabled
    # @option opts [String] :volusion_password Volusion API Password
    # @option opts [String] :hybris_client_id Omni Commerce Connector Client ID
    # @option opts [String] :hybris_client_secret Omni Commerce Connector Client Secret
    # @option opts [String] :squarespace_api_key Squarespace API Key
    # @return [Array<(InlineResponse2006, Fixnum, Hash)>] InlineResponse2006 data, response status code and response headers
    def account_cart_add_with_http_info(cart_id, store_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.account_cart_add ..."
      end
      # verify the required parameter 'cart_id' is set
      if @api_client.config.client_side_validation && cart_id.nil?
        fail ArgumentError, "Missing the required parameter 'cart_id' when calling AccountApi.account_cart_add"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['3DCartApi', 'AceShop', 'Amazon', 'AspDotNetStorefront', 'BigcommerceApi', 'Creloaded', 'Cscart', 'Cubecart', 'Demandware', 'EBay', 'Ecwid', 'Etsy', 'Gambio', 'Interspire', 'JooCart', 'Magento1212', 'MijoShop', 'Neto', 'Opencart14', 'Oscmax2', 'Oscommerce22ms2', 'Oxid', 'Pinnacle', 'Prestashop', 'SSPremium', 'Shopify', 'Squarespace', 'Shopware', 'Tomatocart', 'Ubercart', 'Virtuemart', 'Volusion', 'WPecommerce', 'Walmart', 'WebAsyst', 'Woocommerce', 'Xcart', 'Xtcommerce', 'XtcommerceVeyton', 'Zencart137'].include?(cart_id)
        fail ArgumentError, "invalid value for 'cart_id', must be one of 3DCartApi, AceShop, Amazon, AspDotNetStorefront, BigcommerceApi, Creloaded, Cscart, Cubecart, Demandware, EBay, Ecwid, Etsy, Gambio, Interspire, JooCart, Magento1212, MijoShop, Neto, Opencart14, Oscmax2, Oscommerce22ms2, Oxid, Pinnacle, Prestashop, SSPremium, Shopify, Squarespace, Shopware, Tomatocart, Ubercart, Virtuemart, Volusion, WPecommerce, Walmart, WebAsyst, Woocommerce, Xcart, Xtcommerce, XtcommerceVeyton, Zencart137"
      end
      # verify the required parameter 'store_url' is set
      if @api_client.config.client_side_validation && store_url.nil?
        fail ArgumentError, "Missing the required parameter 'store_url' when calling AccountApi.account_cart_add"
      end
      # resource path
      local_var_path = "/account.cart.add.json"

      # query parameters
      query_params = {}
      query_params[:'cart_id'] = cart_id
      query_params[:'store_url'] = store_url
      query_params[:'bridge_url'] = opts[:'bridge_url'] if !opts[:'bridge_url'].nil?
      query_params[:'store_root'] = opts[:'store_root'] if !opts[:'store_root'].nil?
      query_params[:'store_key'] = opts[:'store_key'] if !opts[:'store_key'].nil?
      query_params[:'validate_version'] = opts[:'validate_version'] if !opts[:'validate_version'].nil?
      query_params[:'verify'] = opts[:'verify'] if !opts[:'verify'].nil?
      query_params[:'db_tables_prefix'] = opts[:'db_tables_prefix'] if !opts[:'db_tables_prefix'].nil?
      query_params[:'ftp_host'] = opts[:'ftp_host'] if !opts[:'ftp_host'].nil?
      query_params[:'ftp_user'] = opts[:'ftp_user'] if !opts[:'ftp_user'].nil?
      query_params[:'ftp_password'] = opts[:'ftp_password'] if !opts[:'ftp_password'].nil?
      query_params[:'ftp_port'] = opts[:'ftp_port'] if !opts[:'ftp_port'].nil?
      query_params[:'ftp_store_dir'] = opts[:'ftp_store_dir'] if !opts[:'ftp_store_dir'].nil?
      query_params[:'3dcartapi_api_key'] = opts[:'_3dcartapi_api_key'] if !opts[:'_3dcartapi_api_key'].nil?
      query_params[:'amazon_access_token'] = opts[:'amazon_access_token'] if !opts[:'amazon_access_token'].nil?
      query_params[:'amazon_seller_id'] = opts[:'amazon_seller_id'] if !opts[:'amazon_seller_id'].nil?
      query_params[:'amazon_marketplaces_ids'] = opts[:'amazon_marketplaces_ids'] if !opts[:'amazon_marketplaces_ids'].nil?
      query_params[:'amazon_secret_key'] = opts[:'amazon_secret_key'] if !opts[:'amazon_secret_key'].nil?
      query_params[:'amazon_access_key_id'] = opts[:'amazon_access_key_id'] if !opts[:'amazon_access_key_id'].nil?
      query_params[:'aspdotnetstorefront_api_user'] = opts[:'aspdotnetstorefront_api_user'] if !opts[:'aspdotnetstorefront_api_user'].nil?
      query_params[:'aspdotnetstorefront_api_pass'] = opts[:'aspdotnetstorefront_api_pass'] if !opts[:'aspdotnetstorefront_api_pass'].nil?
      query_params[:'bigcommerceapi_admin_account'] = opts[:'bigcommerceapi_admin_account'] if !opts[:'bigcommerceapi_admin_account'].nil?
      query_params[:'bigcommerceapi_api_path'] = opts[:'bigcommerceapi_api_path'] if !opts[:'bigcommerceapi_api_path'].nil?
      query_params[:'bigcommerceapi_api_key'] = opts[:'bigcommerceapi_api_key'] if !opts[:'bigcommerceapi_api_key'].nil?
      query_params[:'bigcommerceapi_client_id'] = opts[:'bigcommerceapi_client_id'] if !opts[:'bigcommerceapi_client_id'].nil?
      query_params[:'bigcommerceapi_access_token'] = opts[:'bigcommerceapi_access_token'] if !opts[:'bigcommerceapi_access_token'].nil?
      query_params[:'bigcommerceapi_context'] = opts[:'bigcommerceapi_context'] if !opts[:'bigcommerceapi_context'].nil?
      query_params[:'demandware_client_id'] = opts[:'demandware_client_id'] if !opts[:'demandware_client_id'].nil?
      query_params[:'demandware_api_password'] = opts[:'demandware_api_password'] if !opts[:'demandware_api_password'].nil?
      query_params[:'demandware_user_name'] = opts[:'demandware_user_name'] if !opts[:'demandware_user_name'].nil?
      query_params[:'demandware_user_password'] = opts[:'demandware_user_password'] if !opts[:'demandware_user_password'].nil?
      query_params[:'demandware_env_type'] = opts[:'demandware_env_type'] if !opts[:'demandware_env_type'].nil?
      query_params[:'ebay_client_id'] = opts[:'ebay_client_id'] if !opts[:'ebay_client_id'].nil?
      query_params[:'ebay_client_secret'] = opts[:'ebay_client_secret'] if !opts[:'ebay_client_secret'].nil?
      query_params[:'ebay_runame'] = opts[:'ebay_runame'] if !opts[:'ebay_runame'].nil?
      query_params[:'ebay_access_token'] = opts[:'ebay_access_token'] if !opts[:'ebay_access_token'].nil?
      query_params[:'ebay_refresh_token'] = opts[:'ebay_refresh_token'] if !opts[:'ebay_refresh_token'].nil?
      query_params[:'ebay_environment'] = opts[:'ebay_environment'] if !opts[:'ebay_environment'].nil?
      query_params[:'ebay_site_id'] = opts[:'ebay_site_id'] if !opts[:'ebay_site_id'].nil?
      query_params[:'walmart_client_id'] = opts[:'walmart_client_id'] if !opts[:'walmart_client_id'].nil?
      query_params[:'walmart_client_secret'] = opts[:'walmart_client_secret'] if !opts[:'walmart_client_secret'].nil?
      query_params[:'ecwid_acess_token'] = opts[:'ecwid_acess_token'] if !opts[:'ecwid_acess_token'].nil?
      query_params[:'ecwid_store_id'] = opts[:'ecwid_store_id'] if !opts[:'ecwid_store_id'].nil?
      query_params[:'etsy_keystring'] = opts[:'etsy_keystring'] if !opts[:'etsy_keystring'].nil?
      query_params[:'etsy_shared_secret'] = opts[:'etsy_shared_secret'] if !opts[:'etsy_shared_secret'].nil?
      query_params[:'etsy_access_token'] = opts[:'etsy_access_token'] if !opts[:'etsy_access_token'].nil?
      query_params[:'etsy_token_secret'] = opts[:'etsy_token_secret'] if !opts[:'etsy_token_secret'].nil?
      query_params[:'neto_api_key'] = opts[:'neto_api_key'] if !opts[:'neto_api_key'].nil?
      query_params[:'neto_api_username'] = opts[:'neto_api_username'] if !opts[:'neto_api_username'].nil?
      query_params[:'shopify_api_key'] = opts[:'shopify_api_key'] if !opts[:'shopify_api_key'].nil?
      query_params[:'shopify_api_password'] = opts[:'shopify_api_password'] if !opts[:'shopify_api_password'].nil?
      query_params[:'shopify_shared_secret'] = opts[:'shopify_shared_secret'] if !opts[:'shopify_shared_secret'].nil?
      query_params[:'shopify_access_token'] = opts[:'shopify_access_token'] if !opts[:'shopify_access_token'].nil?
      query_params[:'volusion_login'] = opts[:'volusion_login'] if !opts[:'volusion_login'].nil?
      query_params[:'volusion_password'] = opts[:'volusion_password'] if !opts[:'volusion_password'].nil?
      query_params[:'hybris_client_id'] = opts[:'hybris_client_id'] if !opts[:'hybris_client_id'].nil?
      query_params[:'hybris_client_secret'] = opts[:'hybris_client_secret'] if !opts[:'hybris_client_secret'].nil?
      query_params[:'squarespace_api_key'] = opts[:'squarespace_api_key'] if !opts[:'squarespace_api_key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2006')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#account_cart_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of carts.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to force_all)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :request_from_date Retrieve entities from their creation date
    # @option opts [String] :request_to_date Retrieve entities to their creation date
    # @option opts [String] :store_url A web address of a store
    # @option opts [String] :store_key Find store by store key
    # @return [InlineResponse20026]
    def account_cart_list(opts = {})
      data, _status_code, _headers = account_cart_list_with_http_info(opts)
      return data
    end

    # 
    # Get list of carts.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :request_from_date Retrieve entities from their creation date
    # @option opts [String] :request_to_date Retrieve entities to their creation date
    # @option opts [String] :store_url A web address of a store
    # @option opts [String] :store_key Find store by store key
    # @return [Array<(InlineResponse20026, Fixnum, Hash)>] InlineResponse20026 data, response status code and response headers
    def account_cart_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.account_cart_list ..."
      end
      # resource path
      local_var_path = "/account.cart.list.json"

      # query parameters
      query_params = {}
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'request_from_date'] = opts[:'request_from_date'] if !opts[:'request_from_date'].nil?
      query_params[:'request_to_date'] = opts[:'request_to_date'] if !opts[:'request_to_date'].nil?
      query_params[:'store_url'] = opts[:'store_url'] if !opts[:'store_url'].nil?
      query_params[:'store_key'] = opts[:'store_key'] if !opts[:'store_key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20026')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#account_cart_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update configs in the API2Cart database.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :new_store_key Update store key
    # @option opts [String] :bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
    # @option opts [String] :store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter)
    # @option opts [String] :db_tables_prefix This parameter is deprecated for this method. Please, use this parameter in method account.config.update
    # @option opts [String] :_3dcartapi_api_key 3DCart API Key
    # @option opts [String] :amazon_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :amazon_seller_id Seller Id
    # @option opts [String] :amazon_marketplaces_ids Comma separated marketplaces ids
    # @option opts [String] :amazon_secret_key Amazon Secret Key
    # @option opts [String] :amazon_access_key_id Amazon Secret Key Id
    # @option opts [String] :aspdotnetstorefront_api_user It&#39;s a AspDotNetStorefront account for which API is available
    # @option opts [String] :aspdotnetstorefront_api_pass AspDotNetStorefront API Password
    # @option opts [String] :bigcommerceapi_admin_account It&#39;s a BigCommerce account for which API is enabled
    # @option opts [String] :bigcommerceapi_api_path BigCommerce API URL
    # @option opts [String] :bigcommerceapi_api_key Bigcommerce API Key
    # @option opts [String] :bigcommerceapi_client_id Client ID of the requesting app
    # @option opts [String] :bigcommerceapi_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :bigcommerceapi_context API Path section unique to the store
    # @option opts [String] :demandware_client_id Demandware client id
    # @option opts [String] :demandware_api_password Demandware api password
    # @option opts [String] :demandware_user_name Demandware user name
    # @option opts [String] :demandware_user_password Demandware user password
    # @option opts [String] :demandware_env_type Demandware environment
    # @option opts [String] :ebay_client_id Application ID (AppID).
    # @option opts [String] :ebay_client_secret Shared Secret from eBay application
    # @option opts [String] :ebay_runame The RuName value that eBay assigns to your application.
    # @option opts [String] :ebay_access_token Used to authenticate API requests.
    # @option opts [String] :ebay_refresh_token Used to renew the access token.
    # @option opts [String] :ebay_environment eBay environment
    # @option opts [Integer] :ebay_site_id eBay global ID (default to 0)
    # @option opts [String] :ecwid_acess_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :ecwid_store_id Store Id
    # @option opts [String] :etsy_keystring Etsy keystring
    # @option opts [String] :etsy_shared_secret Etsy shared secret
    # @option opts [String] :etsy_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :etsy_token_secret Secret token authorizing the app to access resources on behalf of a user
    # @option opts [String] :neto_api_key Neto API Key
    # @option opts [String] :neto_api_username Neto User Name
    # @option opts [String] :shopify_api_key Shopify API Key
    # @option opts [String] :shopify_api_password Shopify API Password
    # @option opts [String] :shopify_shared_secret Shared secret
    # @option opts [String] :shopify_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :volusion_login It&#39;s a Volusion account for which API is enabled
    # @option opts [String] :volusion_password Volusion API Password
    # @option opts [String] :walmart_client_id Walmart client ID
    # @option opts [String] :walmart_client_secret Walmart client secret
    # @option opts [String] :squarespace_api_key Squarespace API Key
    # @return [InlineResponse20027]
    def account_config_update(opts = {})
      data, _status_code, _headers = account_config_update_with_http_info(opts)
      return data
    end

    # 
    # Update configs in the API2Cart database.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :new_store_key Update store key
    # @option opts [String] :bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
    # @option opts [String] :store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter)
    # @option opts [String] :db_tables_prefix This parameter is deprecated for this method. Please, use this parameter in method account.config.update
    # @option opts [String] :_3dcartapi_api_key 3DCart API Key
    # @option opts [String] :amazon_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :amazon_seller_id Seller Id
    # @option opts [String] :amazon_marketplaces_ids Comma separated marketplaces ids
    # @option opts [String] :amazon_secret_key Amazon Secret Key
    # @option opts [String] :amazon_access_key_id Amazon Secret Key Id
    # @option opts [String] :aspdotnetstorefront_api_user It&#39;s a AspDotNetStorefront account for which API is available
    # @option opts [String] :aspdotnetstorefront_api_pass AspDotNetStorefront API Password
    # @option opts [String] :bigcommerceapi_admin_account It&#39;s a BigCommerce account for which API is enabled
    # @option opts [String] :bigcommerceapi_api_path BigCommerce API URL
    # @option opts [String] :bigcommerceapi_api_key Bigcommerce API Key
    # @option opts [String] :bigcommerceapi_client_id Client ID of the requesting app
    # @option opts [String] :bigcommerceapi_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :bigcommerceapi_context API Path section unique to the store
    # @option opts [String] :demandware_client_id Demandware client id
    # @option opts [String] :demandware_api_password Demandware api password
    # @option opts [String] :demandware_user_name Demandware user name
    # @option opts [String] :demandware_user_password Demandware user password
    # @option opts [String] :demandware_env_type Demandware environment
    # @option opts [String] :ebay_client_id Application ID (AppID).
    # @option opts [String] :ebay_client_secret Shared Secret from eBay application
    # @option opts [String] :ebay_runame The RuName value that eBay assigns to your application.
    # @option opts [String] :ebay_access_token Used to authenticate API requests.
    # @option opts [String] :ebay_refresh_token Used to renew the access token.
    # @option opts [String] :ebay_environment eBay environment
    # @option opts [Integer] :ebay_site_id eBay global ID
    # @option opts [String] :ecwid_acess_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :ecwid_store_id Store Id
    # @option opts [String] :etsy_keystring Etsy keystring
    # @option opts [String] :etsy_shared_secret Etsy shared secret
    # @option opts [String] :etsy_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :etsy_token_secret Secret token authorizing the app to access resources on behalf of a user
    # @option opts [String] :neto_api_key Neto API Key
    # @option opts [String] :neto_api_username Neto User Name
    # @option opts [String] :shopify_api_key Shopify API Key
    # @option opts [String] :shopify_api_password Shopify API Password
    # @option opts [String] :shopify_shared_secret Shared secret
    # @option opts [String] :shopify_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :volusion_login It&#39;s a Volusion account for which API is enabled
    # @option opts [String] :volusion_password Volusion API Password
    # @option opts [String] :walmart_client_id Walmart client ID
    # @option opts [String] :walmart_client_secret Walmart client secret
    # @option opts [String] :squarespace_api_key Squarespace API Key
    # @return [Array<(InlineResponse20027, Fixnum, Hash)>] InlineResponse20027 data, response status code and response headers
    def account_config_update_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.account_config_update ..."
      end
      # resource path
      local_var_path = "/account.config.update.json"

      # query parameters
      query_params = {}
      query_params[:'new_store_key'] = opts[:'new_store_key'] if !opts[:'new_store_key'].nil?
      query_params[:'bridge_url'] = opts[:'bridge_url'] if !opts[:'bridge_url'].nil?
      query_params[:'store_root'] = opts[:'store_root'] if !opts[:'store_root'].nil?
      query_params[:'db_tables_prefix'] = opts[:'db_tables_prefix'] if !opts[:'db_tables_prefix'].nil?
      query_params[:'3dcartapi_api_key'] = opts[:'_3dcartapi_api_key'] if !opts[:'_3dcartapi_api_key'].nil?
      query_params[:'amazon_access_token'] = opts[:'amazon_access_token'] if !opts[:'amazon_access_token'].nil?
      query_params[:'amazon_seller_id'] = opts[:'amazon_seller_id'] if !opts[:'amazon_seller_id'].nil?
      query_params[:'amazon_marketplaces_ids'] = opts[:'amazon_marketplaces_ids'] if !opts[:'amazon_marketplaces_ids'].nil?
      query_params[:'amazon_secret_key'] = opts[:'amazon_secret_key'] if !opts[:'amazon_secret_key'].nil?
      query_params[:'amazon_access_key_id'] = opts[:'amazon_access_key_id'] if !opts[:'amazon_access_key_id'].nil?
      query_params[:'aspdotnetstorefront_api_user'] = opts[:'aspdotnetstorefront_api_user'] if !opts[:'aspdotnetstorefront_api_user'].nil?
      query_params[:'aspdotnetstorefront_api_pass'] = opts[:'aspdotnetstorefront_api_pass'] if !opts[:'aspdotnetstorefront_api_pass'].nil?
      query_params[:'bigcommerceapi_admin_account'] = opts[:'bigcommerceapi_admin_account'] if !opts[:'bigcommerceapi_admin_account'].nil?
      query_params[:'bigcommerceapi_api_path'] = opts[:'bigcommerceapi_api_path'] if !opts[:'bigcommerceapi_api_path'].nil?
      query_params[:'bigcommerceapi_api_key'] = opts[:'bigcommerceapi_api_key'] if !opts[:'bigcommerceapi_api_key'].nil?
      query_params[:'bigcommerceapi_client_id'] = opts[:'bigcommerceapi_client_id'] if !opts[:'bigcommerceapi_client_id'].nil?
      query_params[:'bigcommerceapi_access_token'] = opts[:'bigcommerceapi_access_token'] if !opts[:'bigcommerceapi_access_token'].nil?
      query_params[:'bigcommerceapi_context'] = opts[:'bigcommerceapi_context'] if !opts[:'bigcommerceapi_context'].nil?
      query_params[:'demandware_client_id'] = opts[:'demandware_client_id'] if !opts[:'demandware_client_id'].nil?
      query_params[:'demandware_api_password'] = opts[:'demandware_api_password'] if !opts[:'demandware_api_password'].nil?
      query_params[:'demandware_user_name'] = opts[:'demandware_user_name'] if !opts[:'demandware_user_name'].nil?
      query_params[:'demandware_user_password'] = opts[:'demandware_user_password'] if !opts[:'demandware_user_password'].nil?
      query_params[:'demandware_env_type'] = opts[:'demandware_env_type'] if !opts[:'demandware_env_type'].nil?
      query_params[:'ebay_client_id'] = opts[:'ebay_client_id'] if !opts[:'ebay_client_id'].nil?
      query_params[:'ebay_client_secret'] = opts[:'ebay_client_secret'] if !opts[:'ebay_client_secret'].nil?
      query_params[:'ebay_runame'] = opts[:'ebay_runame'] if !opts[:'ebay_runame'].nil?
      query_params[:'ebay_access_token'] = opts[:'ebay_access_token'] if !opts[:'ebay_access_token'].nil?
      query_params[:'ebay_refresh_token'] = opts[:'ebay_refresh_token'] if !opts[:'ebay_refresh_token'].nil?
      query_params[:'ebay_environment'] = opts[:'ebay_environment'] if !opts[:'ebay_environment'].nil?
      query_params[:'ebay_site_id'] = opts[:'ebay_site_id'] if !opts[:'ebay_site_id'].nil?
      query_params[:'ecwid_acess_token'] = opts[:'ecwid_acess_token'] if !opts[:'ecwid_acess_token'].nil?
      query_params[:'ecwid_store_id'] = opts[:'ecwid_store_id'] if !opts[:'ecwid_store_id'].nil?
      query_params[:'etsy_keystring'] = opts[:'etsy_keystring'] if !opts[:'etsy_keystring'].nil?
      query_params[:'etsy_shared_secret'] = opts[:'etsy_shared_secret'] if !opts[:'etsy_shared_secret'].nil?
      query_params[:'etsy_access_token'] = opts[:'etsy_access_token'] if !opts[:'etsy_access_token'].nil?
      query_params[:'etsy_token_secret'] = opts[:'etsy_token_secret'] if !opts[:'etsy_token_secret'].nil?
      query_params[:'neto_api_key'] = opts[:'neto_api_key'] if !opts[:'neto_api_key'].nil?
      query_params[:'neto_api_username'] = opts[:'neto_api_username'] if !opts[:'neto_api_username'].nil?
      query_params[:'shopify_api_key'] = opts[:'shopify_api_key'] if !opts[:'shopify_api_key'].nil?
      query_params[:'shopify_api_password'] = opts[:'shopify_api_password'] if !opts[:'shopify_api_password'].nil?
      query_params[:'shopify_shared_secret'] = opts[:'shopify_shared_secret'] if !opts[:'shopify_shared_secret'].nil?
      query_params[:'shopify_access_token'] = opts[:'shopify_access_token'] if !opts[:'shopify_access_token'].nil?
      query_params[:'volusion_login'] = opts[:'volusion_login'] if !opts[:'volusion_login'].nil?
      query_params[:'volusion_password'] = opts[:'volusion_password'] if !opts[:'volusion_password'].nil?
      query_params[:'walmart_client_id'] = opts[:'walmart_client_id'] if !opts[:'walmart_client_id'].nil?
      query_params[:'walmart_client_secret'] = opts[:'walmart_client_secret'] if !opts[:'walmart_client_secret'].nil?
      query_params[:'squarespace_api_key'] = opts[:'squarespace_api_key'] if !opts[:'squarespace_api_key'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20027')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#account_config_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # List webhooks that was not delivered to the callback.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [String] :ids List of сomma-separated webhook ids
    # @return [InlineResponse20028]
    def account_failed_webhooks(opts = {})
      data, _status_code, _headers = account_failed_webhooks_with_http_info(opts)
      return data
    end

    # 
    # List webhooks that was not delivered to the callback.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [String] :ids List of сomma-separated webhook ids
    # @return [Array<(InlineResponse20028, Fixnum, Hash)>] InlineResponse20028 data, response status code and response headers
    def account_failed_webhooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.account_failed_webhooks ..."
      end
      # resource path
      local_var_path = "/account.failed_webhooks.json"

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20028')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#account_failed_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of supported platforms
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20029]
    def account_supported_platforms(opts = {})
      data, _status_code, _headers = account_supported_platforms_with_http_info(opts)
      return data
    end

    # 
    # Get list of supported platforms
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20029, Fixnum, Hash)>] InlineResponse20029 data, response status code and response headers
    def account_supported_platforms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountApi.account_supported_platforms ..."
      end
      # resource path
      local_var_path = "/account.supported_platforms.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20029')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#account_supported_platforms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
