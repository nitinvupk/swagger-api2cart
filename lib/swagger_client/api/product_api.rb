=begin
#Swagger API2Cart

#API2Cart

OpenAPI spec version: 1.1
Contact: contact@api2cart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module SwaggerClient
  class ProductApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Add new product to store.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20034]
    def product_add(body, opts = {})
      data, _status_code, _headers = product_add_with_http_info(body, opts)
      return data
    end

    # 
    # Add new product to store.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20034, Fixnum, Hash)>] InlineResponse20034 data, response status code and response headers
    def product_add_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_add ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProductApi.product_add"
      end
      # resource path
      local_var_path = "/product.add.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20034')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of attributes and values.
    # @param product_id Retrieves attributes specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :attribute_id Retrieves info for specified attribute_id
    # @option opts [String] :attribute_group_id Filter by attribute_group_id
    # @option opts [String] :set_name Retrieves attributes specified by set_name in Magento
    # @option opts [String] :lang_id Retrieves attributes specified by language id
    # @option opts [String] :store_id Retrieves attributes specified by store id
    # @option opts [String] :sort_by Set field to sort by (default to attribute_id)
    # @option opts [String] :sort_direction Set sorting direction (default to asc)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to attribute_id,name)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseProductAttributeList]
    def product_attribute_list(product_id, opts = {})
      data, _status_code, _headers = product_attribute_list_with_http_info(product_id, opts)
      return data
    end

    # 
    # Get list of attributes and values.
    # @param product_id Retrieves attributes specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :attribute_id Retrieves info for specified attribute_id
    # @option opts [String] :attribute_group_id Filter by attribute_group_id
    # @option opts [String] :set_name Retrieves attributes specified by set_name in Magento
    # @option opts [String] :lang_id Retrieves attributes specified by language id
    # @option opts [String] :store_id Retrieves attributes specified by store id
    # @option opts [String] :sort_by Set field to sort by
    # @option opts [String] :sort_direction Set sorting direction
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseProductAttributeList, Fixnum, Hash)>] ModelResponseProductAttributeList data, response status code and response headers
    def product_attribute_list_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_attribute_list ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_attribute_list"
      end
      # resource path
      local_var_path = "/product.attribute.list.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'attribute_id'] = opts[:'attribute_id'] if !opts[:'attribute_id'].nil?
      query_params[:'attribute_group_id'] = opts[:'attribute_group_id'] if !opts[:'attribute_group_id'].nil?
      query_params[:'set_name'] = opts[:'set_name'] if !opts[:'set_name'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_direction'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelResponseProductAttributeList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_attribute_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Set attribute value to product.
    # @param product_id Defines product id where the attribute should be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_id Filter by attribute_id
    # @option opts [String] :attribute_group_id Filter by attribute_group_id
    # @option opts [String] :attribute_name Define attribute name
    # @option opts [String] :value Define attribute value
    # @option opts [Integer] :value_id Define attribute value id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :store_id Store Id
    # @return [InlineResponse20064]
    def product_attribute_value_set(product_id, opts = {})
      data, _status_code, _headers = product_attribute_value_set_with_http_info(product_id, opts)
      return data
    end

    # 
    # Set attribute value to product.
    # @param product_id Defines product id where the attribute should be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_id Filter by attribute_id
    # @option opts [String] :attribute_group_id Filter by attribute_group_id
    # @option opts [String] :attribute_name Define attribute name
    # @option opts [String] :value Define attribute value
    # @option opts [Integer] :value_id Define attribute value id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :store_id Store Id
    # @return [Array<(InlineResponse20064, Fixnum, Hash)>] InlineResponse20064 data, response status code and response headers
    def product_attribute_value_set_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_attribute_value_set ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_attribute_value_set"
      end
      # resource path
      local_var_path = "/product.attribute.value.set.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'attribute_id'] = opts[:'attribute_id'] if !opts[:'attribute_id'].nil?
      query_params[:'attribute_group_id'] = opts[:'attribute_group_id'] if !opts[:'attribute_group_id'].nil?
      query_params[:'attribute_name'] = opts[:'attribute_name'] if !opts[:'attribute_name'].nil?
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?
      query_params[:'value_id'] = opts[:'value_id'] if !opts[:'value_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20064')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_attribute_value_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Removes attribute value for a product.
    # @param product_id Product id
    # @param attribute_id Attribute Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [BOOLEAN] :include_default Boolean, whether or not to unset default value of the attribute, if applicable (default to false)
    # @option opts [BOOLEAN] :reindex Is reindex required (default to true)
    # @option opts [BOOLEAN] :clear_cache Is cache clear required (default to true)
    # @return [InlineResponse20065]
    def product_attribute_value_unset(product_id, attribute_id, opts = {})
      data, _status_code, _headers = product_attribute_value_unset_with_http_info(product_id, attribute_id, opts)
      return data
    end

    # 
    # Removes attribute value for a product.
    # @param product_id Product id
    # @param attribute_id Attribute Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [BOOLEAN] :include_default Boolean, whether or not to unset default value of the attribute, if applicable
    # @option opts [BOOLEAN] :reindex Is reindex required
    # @option opts [BOOLEAN] :clear_cache Is cache clear required
    # @return [Array<(InlineResponse20065, Fixnum, Hash)>] InlineResponse20065 data, response status code and response headers
    def product_attribute_value_unset_with_http_info(product_id, attribute_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_attribute_value_unset ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_attribute_value_unset"
      end
      # verify the required parameter 'attribute_id' is set
      if @api_client.config.client_side_validation && attribute_id.nil?
        fail ArgumentError, "Missing the required parameter 'attribute_id' when calling ProductApi.product_attribute_value_unset"
      end
      # resource path
      local_var_path = "/product.attribute.value.unset.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'attribute_id'] = attribute_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'include_default'] = opts[:'include_default'] if !opts[:'include_default'].nil?
      query_params[:'reindex'] = opts[:'reindex'] if !opts[:'reindex'].nil?
      query_params[:'clear_cache'] = opts[:'clear_cache'] if !opts[:'clear_cache'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20065')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_attribute_value_unset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of brands from your store.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,name,short_description,active,url)
    # @option opts [String] :brand_ids Retrieves brands specified by brand ids
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @return [InlineResponse20078]
    def product_brand_list(opts = {})
      data, _status_code, _headers = product_brand_list_with_http_info(opts)
      return data
    end

    # 
    # Get list of brands from your store.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :brand_ids Retrieves brands specified by brand ids
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @return [Array<(InlineResponse20078, Fixnum, Hash)>] InlineResponse20078 data, response status code and response headers
    def product_brand_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_brand_list ..."
      end
      # resource path
      local_var_path = "/product.brand.list.json"

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'brand_ids'] = opts[:'brand_ids'] if !opts[:'brand_ids'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20078')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_brand_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Search product child item (bundled item or configurable product variant) in store catalog.
    # @param find_value Entity search that is specified by some value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields (default to name)
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters (default to whole_words)
    # @option opts [String] :store_id Store Id
    # @return [InlineResponse20014]
    def product_child_item_find(find_value, opts = {})
      data, _status_code, _headers = product_child_item_find_with_http_info(find_value, opts)
      return data
    end

    # 
    # Search product child item (bundled item or configurable product variant) in store catalog.
    # @param find_value Entity search that is specified by some value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(InlineResponse20014, Fixnum, Hash)>] InlineResponse20014 data, response status code and response headers
    def product_child_item_find_with_http_info(find_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_child_item_find ..."
      end
      # verify the required parameter 'find_value' is set
      if @api_client.config.client_side_validation && find_value.nil?
        fail ArgumentError, "Missing the required parameter 'find_value' when calling ProductApi.product_child_item_find"
      end
      # resource path
      local_var_path = "/product.child_item.find.json"

      # query parameters
      query_params = {}
      query_params[:'find_value'] = find_value
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'find_params'] = opts[:'find_params'] if !opts[:'find_params'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_child_item_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get child for specific product.
    # @param product_id Filter by parent product id
    # @param id Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to force_all)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Store Id
    # @return [InlineResponse20073]
    def product_child_item_info(product_id, id, opts = {})
      data, _status_code, _headers = product_child_item_info_with_http_info(product_id, id, opts)
      return data
    end

    # 
    # Get child for specific product.
    # @param product_id Filter by parent product id
    # @param id Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Store Id
    # @return [Array<(InlineResponse20073, Fixnum, Hash)>] InlineResponse20073 data, response status code and response headers
    def product_child_item_info_with_http_info(product_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_child_item_info ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_child_item_info"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_child_item_info"
      end
      # resource path
      local_var_path = "/product.child_item.info.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'id'] = id
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20073')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_child_item_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get child items list of specific product(s).
    # @param product_id Filter by parent product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to force_all)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :product_ids Filter by parent product id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [BOOLEAN] :avail_sale Specifies the set of available/not available products for sale
    # @option opts [String] :report_request_id Report request id
    # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request (default to false)
    # @return [ModelResponseProductChildItemList]
    def product_child_item_list(product_id, opts = {})
      data, _status_code, _headers = product_child_item_list_with_http_info(product_id, opts)
      return data
    end

    # 
    # Get child items list of specific product(s).
    # @param product_id Filter by parent product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :product_ids Filter by parent product id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [BOOLEAN] :avail_sale Specifies the set of available/not available products for sale
    # @option opts [String] :report_request_id Report request id
    # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request
    # @return [Array<(ModelResponseProductChildItemList, Fixnum, Hash)>] ModelResponseProductChildItemList data, response status code and response headers
    def product_child_item_list_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_child_item_list ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_child_item_list"
      end
      # resource path
      local_var_path = "/product.child_item.list.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'product_ids'] = opts[:'product_ids'] if !opts[:'product_ids'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'currency_id'] = opts[:'currency_id'] if !opts[:'currency_id'].nil?
      query_params[:'avail_sale'] = opts[:'avail_sale'] if !opts[:'avail_sale'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelResponseProductChildItemList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_child_item_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Count products in store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category_id Counts products specified by category id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [BOOLEAN] :avail_view Specifies the set of visible/invisible products
    # @option opts [BOOLEAN] :avail_sale Specifies the set of available/not available products for sale
    # @option opts [String] :store_id Counts products specified by store id
    # @option opts [String] :lang_id Counts products specified by language id
    # @option opts [String] :product_ids Counts products specified by product ids
    # @option opts [String] :report_request_id Report request id
    # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request (default to false)
    # @return [InlineResponse20031]
    def product_count(opts = {})
      data, _status_code, _headers = product_count_with_http_info(opts)
      return data
    end

    # 
    # Count products in store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category_id Counts products specified by category id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [BOOLEAN] :avail_view Specifies the set of visible/invisible products
    # @option opts [BOOLEAN] :avail_sale Specifies the set of available/not available products for sale
    # @option opts [String] :store_id Counts products specified by store id
    # @option opts [String] :lang_id Counts products specified by language id
    # @option opts [String] :product_ids Counts products specified by product ids
    # @option opts [String] :report_request_id Report request id
    # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request
    # @return [Array<(InlineResponse20031, Fixnum, Hash)>] InlineResponse20031 data, response status code and response headers
    def product_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_count ..."
      end
      # resource path
      local_var_path = "/product.count.json"

      # query parameters
      query_params = {}
      query_params[:'category_id'] = opts[:'category_id'] if !opts[:'category_id'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'avail_view'] = opts[:'avail_view'] if !opts[:'avail_view'].nil?
      query_params[:'avail_sale'] = opts[:'avail_sale'] if !opts[:'avail_sale'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'product_ids'] = opts[:'product_ids'] if !opts[:'product_ids'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20031')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add currency and/or set default in store
    # @param iso3 Specifies standardized currency code
    # @param rate Defines the numerical identifier against to the major currency
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Defines currency&#39;s name
    # @option opts [BOOLEAN] :avail Specifies whether the currency is available (default to true)
    # @option opts [String] :symbol_left Defines the symbol that is located before the currency
    # @option opts [String] :symbol_right Defines the symbol that is located after the currency
    # @option opts [BOOLEAN] :default Specifies currency&#39;s default meaning (default to false)
    # @return [InlineResponse20079]
    def product_currency_add(iso3, rate, opts = {})
      data, _status_code, _headers = product_currency_add_with_http_info(iso3, rate, opts)
      return data
    end

    # 
    # Add currency and/or set default in store
    # @param iso3 Specifies standardized currency code
    # @param rate Defines the numerical identifier against to the major currency
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Defines currency&#39;s name
    # @option opts [BOOLEAN] :avail Specifies whether the currency is available
    # @option opts [String] :symbol_left Defines the symbol that is located before the currency
    # @option opts [String] :symbol_right Defines the symbol that is located after the currency
    # @option opts [BOOLEAN] :default Specifies currency&#39;s default meaning
    # @return [Array<(InlineResponse20079, Fixnum, Hash)>] InlineResponse20079 data, response status code and response headers
    def product_currency_add_with_http_info(iso3, rate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_currency_add ..."
      end
      # verify the required parameter 'iso3' is set
      if @api_client.config.client_side_validation && iso3.nil?
        fail ArgumentError, "Missing the required parameter 'iso3' when calling ProductApi.product_currency_add"
      end
      # verify the required parameter 'rate' is set
      if @api_client.config.client_side_validation && rate.nil?
        fail ArgumentError, "Missing the required parameter 'rate' when calling ProductApi.product_currency_add"
      end
      # resource path
      local_var_path = "/product.currency.add.json"

      # query parameters
      query_params = {}
      query_params[:'iso3'] = iso3
      query_params[:'rate'] = rate
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'symbol_left'] = opts[:'symbol_left'] if !opts[:'symbol_left'].nil?
      query_params[:'symbol_right'] = opts[:'symbol_right'] if !opts[:'symbol_right'].nil?
      query_params[:'default'] = opts[:'default'] if !opts[:'default'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20079')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_currency_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of currencies
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to name,iso3,default,avail)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [BOOLEAN] :default Specifies the set of default/not default currencies
    # @option opts [BOOLEAN] :avail Specifies the set of available/not available currencies
    # @return [InlineResponse20080]
    def product_currency_list(opts = {})
      data, _status_code, _headers = product_currency_list_with_http_info(opts)
      return data
    end

    # 
    # Get list of currencies
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [BOOLEAN] :default Specifies the set of default/not default currencies
    # @option opts [BOOLEAN] :avail Specifies the set of available/not available currencies
    # @return [Array<(InlineResponse20080, Fixnum, Hash)>] InlineResponse20080 data, response status code and response headers
    def product_currency_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_currency_list ..."
      end
      # resource path
      local_var_path = "/product.currency.list.json"

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'default'] = opts[:'default'] if !opts[:'default'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20080')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_currency_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Product delete
    # @param id Product id that will be removed
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20035]
    def product_delete(id, opts = {})
      data, _status_code, _headers = product_delete_with_http_info(id, opts)
      return data
    end

    # 
    # Product delete
    # @param id Product id that will be removed
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20035, Fixnum, Hash)>] InlineResponse20035 data, response status code and response headers
    def product_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_delete"
      end
      # resource path
      local_var_path = "/product.delete.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20035')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve all available fields for product item in store.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20014]
    def product_fields(opts = {})
      data, _status_code, _headers = product_fields_with_http_info(opts)
      return data
    end

    # 
    # Retrieve all available fields for product item in store.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20014, Fixnum, Hash)>] InlineResponse20014 data, response status code and response headers
    def product_fields_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_fields ..."
      end
      # resource path
      local_var_path = "/product.fields.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Search product in store catalog. \"Apple\" is specified here by default.
    # @param find_value Entity search that is specified by some value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields (default to name)
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters (default to whole_words)
    # @option opts [String] :find_what Parameter&#39;s value specifies the entity that has to be found (default to product)
    # @return [InlineResponse20033]
    def product_find(find_value, opts = {})
      data, _status_code, _headers = product_find_with_http_info(find_value, opts)
      return data
    end

    # 
    # Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
    # @param find_value Entity search that is specified by some value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters
    # @option opts [String] :find_what Parameter&#39;s value specifies the entity that has to be found
    # @return [Array<(InlineResponse20033, Fixnum, Hash)>] InlineResponse20033 data, response status code and response headers
    def product_find_with_http_info(find_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_find ..."
      end
      # verify the required parameter 'find_value' is set
      if @api_client.config.client_side_validation && find_value.nil?
        fail ArgumentError, "Missing the required parameter 'find_value' when calling ProductApi.product_find"
      end
      # resource path
      local_var_path = "/product.find.json"

      # query parameters
      query_params = {}
      query_params[:'find_value'] = find_value
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'find_params'] = opts[:'find_params'] if !opts[:'find_params'].nil?
      query_params[:'find_what'] = opts[:'find_what'] if !opts[:'find_what'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20033')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add image to product
    # @param product_id Defines product id where the image should be added
    # @param image_name Defines image&#39;s name
    # @param type Defines image&#39;s types that are specified by comma-separated list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url Defines URL of the image that has to be added
    # @option opts [String] :label Defines alternative text that has to be attached to the picture
    # @option opts [String] :mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
    # @option opts [Integer] :position Defines image’s position in the list (default to 0)
    # @option opts [String] :content Content(body) encoded in base64 of image file
    # @option opts [Integer] :product_variant_id Defines product&#39;s variants specified by variant id
    # @option opts [String] :variant_ids Defines product&#39;s variants ids
    # @option opts [String] :store_id Store Id
    # @return [InlineResponse20036]
    def product_image_add(product_id, image_name, type, opts = {})
      data, _status_code, _headers = product_image_add_with_http_info(product_id, image_name, type, opts)
      return data
    end

    # 
    # Add image to product
    # @param product_id Defines product id where the image should be added
    # @param image_name Defines image&#39;s name
    # @param type Defines image&#39;s types that are specified by comma-separated list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url Defines URL of the image that has to be added
    # @option opts [String] :label Defines alternative text that has to be attached to the picture
    # @option opts [String] :mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
    # @option opts [Integer] :position Defines image’s position in the list
    # @option opts [String] :content Content(body) encoded in base64 of image file
    # @option opts [Integer] :product_variant_id Defines product&#39;s variants specified by variant id
    # @option opts [String] :variant_ids Defines product&#39;s variants ids
    # @option opts [String] :store_id Store Id
    # @return [Array<(InlineResponse20036, Fixnum, Hash)>] InlineResponse20036 data, response status code and response headers
    def product_image_add_with_http_info(product_id, image_name, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_image_add ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_image_add"
      end
      # verify the required parameter 'image_name' is set
      if @api_client.config.client_side_validation && image_name.nil?
        fail ArgumentError, "Missing the required parameter 'image_name' when calling ProductApi.product_image_add"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ProductApi.product_image_add"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['small', 'base', 'additional', 'thumbnail'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of small, base, additional, thumbnail"
      end
      # resource path
      local_var_path = "/product.image.add.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'image_name'] = image_name
      query_params[:'type'] = type
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?
      query_params[:'label'] = opts[:'label'] if !opts[:'label'].nil?
      query_params[:'mime'] = opts[:'mime'] if !opts[:'mime'].nil?
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'product_variant_id'] = opts[:'product_variant_id'] if !opts[:'product_variant_id'].nil?
      query_params[:'variant_ids'] = opts[:'variant_ids'] if !opts[:'variant_ids'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20036')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_image_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete image
    # @param product_id Defines product id where the image should be deleted
    # @param id Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [InlineResponse2004]
    def product_image_delete(product_id, id, opts = {})
      data, _status_code, _headers = product_image_delete_with_http_info(product_id, id, opts)
      return data
    end

    # 
    # Delete image
    # @param product_id Defines product id where the image should be deleted
    # @param id Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def product_image_delete_with_http_info(product_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_image_delete ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_image_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_image_delete"
      end
      # resource path
      local_var_path = "/product.image.delete.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'id'] = id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_image_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update details of image
    # @param product_id Defines product id where the image should be updated
    # @param id Defines image update specified by image id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :image_name Defines image&#39;s name
    # @option opts [String] :type Defines image&#39;s types that are specified by comma-separated list (default to additional)
    # @option opts [String] :label Defines alternative text that has to be attached to the picture
    # @option opts [Integer] :position Defines image’s position in the list
    # @option opts [String] :store_id Store Id
    # @option opts [BOOLEAN] :hidden Define is hide image
    # @return [InlineResponse2005]
    def product_image_update(product_id, id, opts = {})
      data, _status_code, _headers = product_image_update_with_http_info(product_id, id, opts)
      return data
    end

    # 
    # Update details of image
    # @param product_id Defines product id where the image should be updated
    # @param id Defines image update specified by image id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :image_name Defines image&#39;s name
    # @option opts [String] :type Defines image&#39;s types that are specified by comma-separated list
    # @option opts [String] :label Defines alternative text that has to be attached to the picture
    # @option opts [Integer] :position Defines image’s position in the list
    # @option opts [String] :store_id Store Id
    # @option opts [BOOLEAN] :hidden Define is hide image
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def product_image_update_with_http_info(product_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_image_update ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_image_update"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_image_update"
      end
      # resource path
      local_var_path = "/product.image.update.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'id'] = id
      query_params[:'image_name'] = opts[:'image_name'] if !opts[:'image_name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'label'] = opts[:'label'] if !opts[:'label'].nil?
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'hidden'] = opts[:'hidden'] if !opts[:'hidden'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_image_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get product info about product ID *** or specify other product ID.
    # @param id Retrieves product&#39;s info specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,name,description,price,categories_ids)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves product info specified by store id
    # @option opts [String] :lang_id Retrieves product info specified by language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [String] :product_variant_params Set this parameter in order to choose which product variants fields you want to retrieve (default to force_all)
    # @option opts [String] :report_request_id Report request id
    # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request (default to false)
    # @return [InlineResponse20032]
    def product_info(id, opts = {})
      data, _status_code, _headers = product_info_with_http_info(id, opts)
      return data
    end

    # 
    # Get product info about product ID *** or specify other product ID.
    # @param id Retrieves product&#39;s info specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves product info specified by store id
    # @option opts [String] :lang_id Retrieves product info specified by language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [String] :product_variant_params Set this parameter in order to choose which product variants fields you want to retrieve
    # @option opts [String] :report_request_id Report request id
    # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request
    # @return [Array<(InlineResponse20032, Fixnum, Hash)>] InlineResponse20032 data, response status code and response headers
    def product_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_info ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_info"
      end
      # resource path
      local_var_path = "/product.info.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'currency_id'] = opts[:'currency_id'] if !opts[:'currency_id'].nil?
      query_params[:'product_variant_params'] = opts[:'product_variant_params'] if !opts[:'product_variant_params'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20032')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of products from your store. Returns 10 products by default.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,name,description,price,categories_ids)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :category_id Retrieves products specified by category id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [BOOLEAN] :avail_view Specifies the set of visible/invisible products
    # @option opts [BOOLEAN] :avail_sale Specifies the set of available/not available products for sale
    # @option opts [String] :store_id Retrieves products specified by store id
    # @option opts [String] :lang_id Retrieves products specified by language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [String] :product_ids Retrieves products specified by product ids
    # @option opts [String] :product_variant_params Set this parameter in order to choose which product variants fields you want to retrieve (default to force_all)
    # @option opts [Integer] :since_id Retrieve entities starting from the specified id.
    # @option opts [String] :report_request_id Report request id
    # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request (default to false)
    # @option opts [String] :sort_by Set field to sort by (default to id)
    # @option opts [String] :sort_direction Set sorting direction (default to asc)
    # @option opts [String] :sku Filter by product&#39;s sku
    # @option opts [BOOLEAN] :disable_cache Disable cache for current request (default to false)
    # @return [ModelResponseProductList]
    def product_list(opts = {})
      data, _status_code, _headers = product_list_with_http_info(opts)
      return data
    end

    # 
    # Get list of products from your store. Returns 10 products by default.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :category_id Retrieves products specified by category id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [BOOLEAN] :avail_view Specifies the set of visible/invisible products
    # @option opts [BOOLEAN] :avail_sale Specifies the set of available/not available products for sale
    # @option opts [String] :store_id Retrieves products specified by store id
    # @option opts [String] :lang_id Retrieves products specified by language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [String] :product_ids Retrieves products specified by product ids
    # @option opts [String] :product_variant_params Set this parameter in order to choose which product variants fields you want to retrieve
    # @option opts [Integer] :since_id Retrieve entities starting from the specified id.
    # @option opts [String] :report_request_id Report request id
    # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request
    # @option opts [String] :sort_by Set field to sort by
    # @option opts [String] :sort_direction Set sorting direction
    # @option opts [String] :sku Filter by product&#39;s sku
    # @option opts [BOOLEAN] :disable_cache Disable cache for current request
    # @return [Array<(ModelResponseProductList, Fixnum, Hash)>] ModelResponseProductList data, response status code and response headers
    def product_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_list ..."
      end
      # resource path
      local_var_path = "/product.list.json"

      # query parameters
      query_params = {}
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'category_id'] = opts[:'category_id'] if !opts[:'category_id'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'avail_view'] = opts[:'avail_view'] if !opts[:'avail_view'].nil?
      query_params[:'avail_sale'] = opts[:'avail_sale'] if !opts[:'avail_sale'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'currency_id'] = opts[:'currency_id'] if !opts[:'currency_id'].nil?
      query_params[:'product_ids'] = opts[:'product_ids'] if !opts[:'product_ids'].nil?
      query_params[:'product_variant_params'] = opts[:'product_variant_params'] if !opts[:'product_variant_params'].nil?
      query_params[:'since_id'] = opts[:'since_id'] if !opts[:'since_id'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_direction'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?
      query_params[:'sku'] = opts[:'sku'] if !opts[:'sku'].nil?
      query_params[:'disable_cache'] = opts[:'disable_cache'] if !opts[:'disable_cache'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelResponseProductList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add manufacturer to store and assign to product
    # @param product_id Defines products specified by product id
    # @param manufacturer Defines product’s manufacturer&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20077]
    def product_manufacturer_add(product_id, manufacturer, opts = {})
      data, _status_code, _headers = product_manufacturer_add_with_http_info(product_id, manufacturer, opts)
      return data
    end

    # 
    # Add manufacturer to store and assign to product
    # @param product_id Defines products specified by product id
    # @param manufacturer Defines product’s manufacturer&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20077, Fixnum, Hash)>] InlineResponse20077 data, response status code and response headers
    def product_manufacturer_add_with_http_info(product_id, manufacturer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_manufacturer_add ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_manufacturer_add"
      end
      # verify the required parameter 'manufacturer' is set
      if @api_client.config.client_side_validation && manufacturer.nil?
        fail ArgumentError, "Missing the required parameter 'manufacturer' when calling ProductApi.product_manufacturer_add"
      end
      # resource path
      local_var_path = "/product.manufacturer.add.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'manufacturer'] = manufacturer

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20077')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_manufacturer_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add product option from store.
    # @param name Defines option&#39;s name
    # @param type Defines option&#39;s type that has to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :product_id Defines product id where the option should be added
    # @option opts [String] :option_values Defines option values that has to be added in Magento
    # @option opts [String] :description Defines option&#39;s description
    # @option opts [BOOLEAN] :avail Defines whether the option is available (default to true)
    # @option opts [Integer] :sort_order Sort number in the list (default to 0)
    # @option opts [BOOLEAN] :required Defines if the option is required (default to false)
    # @return [InlineResponse20066]
    def product_option_add(name, type, opts = {})
      data, _status_code, _headers = product_option_add_with_http_info(name, type, opts)
      return data
    end

    # 
    # Add product option from store.
    # @param name Defines option&#39;s name
    # @param type Defines option&#39;s type that has to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :product_id Defines product id where the option should be added
    # @option opts [String] :option_values Defines option values that has to be added in Magento
    # @option opts [String] :description Defines option&#39;s description
    # @option opts [BOOLEAN] :avail Defines whether the option is available
    # @option opts [Integer] :sort_order Sort number in the list
    # @option opts [BOOLEAN] :required Defines if the option is required
    # @return [Array<(InlineResponse20066, Fixnum, Hash)>] InlineResponse20066 data, response status code and response headers
    def product_option_add_with_http_info(name, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_option_add ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ProductApi.product_option_add"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ProductApi.product_option_add"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['option_type_select', 'option_type_text', 'option_type_radio', 'option_type_checkbox', 'option_type_textarea', 'option_type_readonly', 'option_type_multiselect', 'option_type_multicheckbox', 'option_type_file', 'option_type_date', 'option_type_datetime', 'option_type_time'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of option_type_select, option_type_text, option_type_radio, option_type_checkbox, option_type_textarea, option_type_readonly, option_type_multiselect, option_type_multicheckbox, option_type_file, option_type_date, option_type_datetime, option_type_time"
      end
      # resource path
      local_var_path = "/product.option.add.json"

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'type'] = type
      query_params[:'product_id'] = opts[:'product_id'] if !opts[:'product_id'].nil?
      query_params[:'option_values'] = opts[:'option_values'] if !opts[:'option_values'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'required'] = opts[:'required'] if !opts[:'required'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20066')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Assign option from product.
    # @param product_id Defines product id where the option should be assigned
    # @param option_id Defines option id which has to be assigned
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20068]
    def product_option_assign(product_id, option_id, opts = {})
      data, _status_code, _headers = product_option_assign_with_http_info(product_id, option_id, opts)
      return data
    end

    # 
    # Assign option from product.
    # @param product_id Defines product id where the option should be assigned
    # @param option_id Defines option id which has to be assigned
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20068, Fixnum, Hash)>] InlineResponse20068 data, response status code and response headers
    def product_option_assign_with_http_info(product_id, option_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_option_assign ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_option_assign"
      end
      # verify the required parameter 'option_id' is set
      if @api_client.config.client_side_validation && option_id.nil?
        fail ArgumentError, "Missing the required parameter 'option_id' when calling ProductApi.product_option_assign"
      end
      # resource path
      local_var_path = "/product.option.assign.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'option_id'] = option_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20068')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of options.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,name,description)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :product_id Retrieves products&#39; options specified by product id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :store_id Store Id
    # @return [InlineResponse20067]
    def product_option_list(opts = {})
      data, _status_code, _headers = product_option_list_with_http_info(opts)
      return data
    end

    # 
    # Get list of options.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :product_id Retrieves products&#39; options specified by product id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :store_id Store Id
    # @return [Array<(InlineResponse20067, Fixnum, Hash)>] InlineResponse20067 data, response status code and response headers
    def product_option_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_option_list ..."
      end
      # resource path
      local_var_path = "/product.option.list.json"

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'product_id'] = opts[:'product_id'] if !opts[:'product_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20067')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add product option item from option.
    # @param option_id Defines option id where the value has to be added
    # @param option_value Defines option value that has to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sort_order Sort number in the list (default to 0)
    # @return [InlineResponse20069]
    def product_option_value_add(option_id, option_value, opts = {})
      data, _status_code, _headers = product_option_value_add_with_http_info(option_id, option_value, opts)
      return data
    end

    # 
    # Add product option item from option.
    # @param option_id Defines option id where the value has to be added
    # @param option_value Defines option value that has to be added
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sort_order Sort number in the list
    # @return [Array<(InlineResponse20069, Fixnum, Hash)>] InlineResponse20069 data, response status code and response headers
    def product_option_value_add_with_http_info(option_id, option_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_option_value_add ..."
      end
      # verify the required parameter 'option_id' is set
      if @api_client.config.client_side_validation && option_id.nil?
        fail ArgumentError, "Missing the required parameter 'option_id' when calling ProductApi.product_option_value_add"
      end
      # verify the required parameter 'option_value' is set
      if @api_client.config.client_side_validation && option_value.nil?
        fail ArgumentError, "Missing the required parameter 'option_value' when calling ProductApi.product_option_value_add"
      end
      # resource path
      local_var_path = "/product.option.value.add.json"

      # query parameters
      query_params = {}
      query_params[:'option_id'] = option_id
      query_params[:'option_value'] = option_value
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20069')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_value_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Assign product option item from product.
    # @param product_option_id Defines product&#39;s option id where the value has to be assigned
    # @param option_value_id Defines value id that has to be assigned
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20070]
    def product_option_value_assign(product_option_id, option_value_id, opts = {})
      data, _status_code, _headers = product_option_value_assign_with_http_info(product_option_id, option_value_id, opts)
      return data
    end

    # 
    # Assign product option item from product.
    # @param product_option_id Defines product&#39;s option id where the value has to be assigned
    # @param option_value_id Defines value id that has to be assigned
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20070, Fixnum, Hash)>] InlineResponse20070 data, response status code and response headers
    def product_option_value_assign_with_http_info(product_option_id, option_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_option_value_assign ..."
      end
      # verify the required parameter 'product_option_id' is set
      if @api_client.config.client_side_validation && product_option_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_option_id' when calling ProductApi.product_option_value_assign"
      end
      # verify the required parameter 'option_value_id' is set
      if @api_client.config.client_side_validation && option_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'option_value_id' when calling ProductApi.product_option_value_assign"
      end
      # resource path
      local_var_path = "/product.option.value.assign.json"

      # query parameters
      query_params = {}
      query_params[:'product_option_id'] = product_option_id
      query_params[:'option_value_id'] = option_value_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20070')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_value_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update product option item from option.
    # @param option_value_id Defines value id that has to be assigned
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :price Defines new product option price
    # @option opts [Float] :quantity Defines new products&#39; options quantity
    # @return [InlineResponse20027]
    def product_option_value_update(option_value_id, opts = {})
      data, _status_code, _headers = product_option_value_update_with_http_info(option_value_id, opts)
      return data
    end

    # 
    # Update product option item from option.
    # @param option_value_id Defines value id that has to be assigned
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :price Defines new product option price
    # @option opts [Float] :quantity Defines new products&#39; options quantity
    # @return [Array<(InlineResponse20027, Fixnum, Hash)>] InlineResponse20027 data, response status code and response headers
    def product_option_value_update_with_http_info(option_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_option_value_update ..."
      end
      # verify the required parameter 'option_value_id' is set
      if @api_client.config.client_side_validation && option_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'option_value_id' when calling ProductApi.product_option_value_update"
      end
      # resource path
      local_var_path = "/product.option.value.update.json"

      # query parameters
      query_params = {}
      query_params[:'option_value_id'] = option_value_id
      query_params[:'price'] = opts[:'price'] if !opts[:'price'].nil?
      query_params[:'quantity'] = opts[:'quantity'] if !opts[:'quantity'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20027')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_value_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add some prices to the product.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007]
    def product_price_add(body, opts = {})
      data, _status_code, _headers = product_price_add_with_http_info(body, opts)
      return data
    end

    # 
    # Add some prices to the product.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007, Fixnum, Hash)>] InlineResponse2007 data, response status code and response headers
    def product_price_add_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_price_add ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProductApi.product_price_add"
      end
      # resource path
      local_var_path = "/product.price.add.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2007')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_price_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete some prices of the product
    # @param product_id Defines the product where the price has to be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_prices Defines product&#39;s group prices
    # @return [InlineResponse2004]
    def product_price_delete(product_id, opts = {})
      data, _status_code, _headers = product_price_delete_with_http_info(product_id, opts)
      return data
    end

    # 
    # Delete some prices of the product
    # @param product_id Defines the product where the price has to be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_prices Defines product&#39;s group prices
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def product_price_delete_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_price_delete ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_price_delete"
      end
      # resource path
      local_var_path = "/product.price.delete.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'group_prices'] = opts[:'group_prices'] if !opts[:'group_prices'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_price_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update some prices of the product.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20027]
    def product_price_update(body, opts = {})
      data, _status_code, _headers = product_price_update_with_http_info(body, opts)
      return data
    end

    # 
    # Update some prices of the product.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20027, Fixnum, Hash)>] InlineResponse20027 data, response status code and response headers
    def product_price_update_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_price_update ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProductApi.product_price_update"
      end
      # resource path
      local_var_path = "/product.price.update.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20027')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_price_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get reviews of a specific product.
    # @param product_id Product id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :ids Retrieves reviews specified by ids
    # @option opts [String] :store_id Store Id
    # @option opts [String] :status Defines status
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,customer_id,email,message,status)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [InlineResponse20071]
    def product_review_list(product_id, opts = {})
      data, _status_code, _headers = product_review_list_with_http_info(product_id, opts)
      return data
    end

    # 
    # Get reviews of a specific product.
    # @param product_id Product id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :ids Retrieves reviews specified by ids
    # @option opts [String] :store_id Store Id
    # @option opts [String] :status Defines status
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(InlineResponse20071, Fixnum, Hash)>] InlineResponse20071 data, response status code and response headers
    def product_review_list_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_review_list ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_review_list"
      end
      # resource path
      local_var_path = "/product.review.list.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20071')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_review_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Assign product to store
    # @param product_id Defines id of the product which should be assigned to a store
    # @param store_id Defines id of the store product should be assigned to
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20027]
    def product_store_assign(product_id, store_id, opts = {})
      data, _status_code, _headers = product_store_assign_with_http_info(product_id, store_id, opts)
      return data
    end

    # 
    # Assign product to store
    # @param product_id Defines id of the product which should be assigned to a store
    # @param store_id Defines id of the store product should be assigned to
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20027, Fixnum, Hash)>] InlineResponse20027 data, response status code and response headers
    def product_store_assign_with_http_info(product_id, store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_store_assign ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_store_assign"
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling ProductApi.product_store_assign"
      end
      # resource path
      local_var_path = "/product.store.assign.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'store_id'] = store_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20027')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_store_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add tax class and tax rate to store and assign to product.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20076]
    def product_tax_add(body, opts = {})
      data, _status_code, _headers = product_tax_add_with_http_info(body, opts)
      return data
    end

    # 
    # Add tax class and tax rate to store and assign to product.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20076, Fixnum, Hash)>] InlineResponse20076 data, response status code and response headers
    def product_tax_add_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_tax_add ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProductApi.product_tax_add"
      end
      # resource path
      local_var_path = "/product.tax.add.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20076')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_tax_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update price and quantity for a specific product
    # @param id Defines product id that has to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :model Defines product model that has to be updated
    # @option opts [Float] :price Defines new product&#39;s price
    # @option opts [Float] :special_price Defines new product&#39;s special price
    # @option opts [String] :sprice_create Defines the date of special price creation
    # @option opts [String] :sprice_expire Defines the term of special price offer duration
    # @option opts [Float] :cost_price Defines new product&#39;s cost price
    # @option opts [Float] :retail_price Defines new product&#39;s retail price
    # @option opts [Float] :quantity Defines new product&#39;s quantity
    # @option opts [Float] :weight Weight
    # @option opts [Float] :increase_quantity Defines the incremental changes in product quantity
    # @option opts [Float] :reduce_quantity Defines the decrement changes in product quantity
    # @option opts [String] :warehouse_id This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
    # @option opts [Float] :reserve_quantity This parameter allows to reserve/unreserve product quantity.
    # @option opts [BOOLEAN] :manage_stock Defines inventory tracking for product
    # @option opts [String] :name Defines product&#39;s name that has to be updated
    # @option opts [String] :sku Defines new product&#39;s sku
    # @option opts [String] :visible Set visibility status
    # @option opts [String] :manufacturer Defines product&#39;s manufacturer
    # @option opts [String] :manufacturer_id Defines product&#39;s manufacturer by manufacturer_id
    # @option opts [String] :description Defines new product&#39;s description
    # @option opts [String] :short_description Defines short description
    # @option opts [String] :meta_title Defines unique meta title for each entity
    # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
    # @option opts [String] :meta_description Defines unique meta description of a entity
    # @option opts [String] :store_id Defines store id where the product should be found
    # @option opts [String] :lang_id Language id
    # @option opts [BOOLEAN] :in_stock Set stock status
    # @option opts [String] :status Defines product&#39;s status
    # @option opts [String] :seo_url Defines unique URL for SEO
    # @option opts [String] :report_request_id Report request id
    # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request (default to false)
    # @option opts [BOOLEAN] :reindex Is reindex required (default to true)
    # @option opts [String] :tags Product tags
    # @option opts [BOOLEAN] :clear_cache Is cache clear required (default to true)
    # @option opts [String] :gtin Global Trade Item Number. An GTIN is an identifier for trade items.
    # @return [InlineResponse20027]
    def product_update(id, opts = {})
      data, _status_code, _headers = product_update_with_http_info(id, opts)
      return data
    end

    # 
    # Update price and quantity for a specific product
    # @param id Defines product id that has to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :model Defines product model that has to be updated
    # @option opts [Float] :price Defines new product&#39;s price
    # @option opts [Float] :special_price Defines new product&#39;s special price
    # @option opts [String] :sprice_create Defines the date of special price creation
    # @option opts [String] :sprice_expire Defines the term of special price offer duration
    # @option opts [Float] :cost_price Defines new product&#39;s cost price
    # @option opts [Float] :retail_price Defines new product&#39;s retail price
    # @option opts [Float] :quantity Defines new product&#39;s quantity
    # @option opts [Float] :weight Weight
    # @option opts [Float] :increase_quantity Defines the incremental changes in product quantity
    # @option opts [Float] :reduce_quantity Defines the decrement changes in product quantity
    # @option opts [String] :warehouse_id This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
    # @option opts [Float] :reserve_quantity This parameter allows to reserve/unreserve product quantity.
    # @option opts [BOOLEAN] :manage_stock Defines inventory tracking for product
    # @option opts [String] :name Defines product&#39;s name that has to be updated
    # @option opts [String] :sku Defines new product&#39;s sku
    # @option opts [String] :visible Set visibility status
    # @option opts [String] :manufacturer Defines product&#39;s manufacturer
    # @option opts [String] :manufacturer_id Defines product&#39;s manufacturer by manufacturer_id
    # @option opts [String] :description Defines new product&#39;s description
    # @option opts [String] :short_description Defines short description
    # @option opts [String] :meta_title Defines unique meta title for each entity
    # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
    # @option opts [String] :meta_description Defines unique meta description of a entity
    # @option opts [String] :store_id Defines store id where the product should be found
    # @option opts [String] :lang_id Language id
    # @option opts [BOOLEAN] :in_stock Set stock status
    # @option opts [String] :status Defines product&#39;s status
    # @option opts [String] :seo_url Defines unique URL for SEO
    # @option opts [String] :report_request_id Report request id
    # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request
    # @option opts [BOOLEAN] :reindex Is reindex required
    # @option opts [String] :tags Product tags
    # @option opts [BOOLEAN] :clear_cache Is cache clear required
    # @option opts [String] :gtin Global Trade Item Number. An GTIN is an identifier for trade items.
    # @return [Array<(InlineResponse20027, Fixnum, Hash)>] InlineResponse20027 data, response status code and response headers
    def product_update_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_update ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_update"
      end
      # resource path
      local_var_path = "/product.update.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'model'] = opts[:'model'] if !opts[:'model'].nil?
      query_params[:'price'] = opts[:'price'] if !opts[:'price'].nil?
      query_params[:'special_price'] = opts[:'special_price'] if !opts[:'special_price'].nil?
      query_params[:'sprice_create'] = opts[:'sprice_create'] if !opts[:'sprice_create'].nil?
      query_params[:'sprice_expire'] = opts[:'sprice_expire'] if !opts[:'sprice_expire'].nil?
      query_params[:'cost_price'] = opts[:'cost_price'] if !opts[:'cost_price'].nil?
      query_params[:'retail_price'] = opts[:'retail_price'] if !opts[:'retail_price'].nil?
      query_params[:'quantity'] = opts[:'quantity'] if !opts[:'quantity'].nil?
      query_params[:'weight'] = opts[:'weight'] if !opts[:'weight'].nil?
      query_params[:'increase_quantity'] = opts[:'increase_quantity'] if !opts[:'increase_quantity'].nil?
      query_params[:'reduce_quantity'] = opts[:'reduce_quantity'] if !opts[:'reduce_quantity'].nil?
      query_params[:'warehouse_id'] = opts[:'warehouse_id'] if !opts[:'warehouse_id'].nil?
      query_params[:'reserve_quantity'] = opts[:'reserve_quantity'] if !opts[:'reserve_quantity'].nil?
      query_params[:'manage_stock'] = opts[:'manage_stock'] if !opts[:'manage_stock'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'sku'] = opts[:'sku'] if !opts[:'sku'].nil?
      query_params[:'visible'] = opts[:'visible'] if !opts[:'visible'].nil?
      query_params[:'manufacturer'] = opts[:'manufacturer'] if !opts[:'manufacturer'].nil?
      query_params[:'manufacturer_id'] = opts[:'manufacturer_id'] if !opts[:'manufacturer_id'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'short_description'] = opts[:'short_description'] if !opts[:'short_description'].nil?
      query_params[:'meta_title'] = opts[:'meta_title'] if !opts[:'meta_title'].nil?
      query_params[:'meta_keywords'] = opts[:'meta_keywords'] if !opts[:'meta_keywords'].nil?
      query_params[:'meta_description'] = opts[:'meta_description'] if !opts[:'meta_description'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'in_stock'] = opts[:'in_stock'] if !opts[:'in_stock'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'seo_url'] = opts[:'seo_url'] if !opts[:'seo_url'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?
      query_params[:'reindex'] = opts[:'reindex'] if !opts[:'reindex'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?
      query_params[:'clear_cache'] = opts[:'clear_cache'] if !opts[:'clear_cache'].nil?
      query_params[:'gtin'] = opts[:'gtin'] if !opts[:'gtin'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20027')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add variant to product.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20072]
    def product_variant_add(body, opts = {})
      data, _status_code, _headers = product_variant_add_with_http_info(body, opts)
      return data
    end

    # 
    # Add variant to product.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20072, Fixnum, Hash)>] InlineResponse20072 data, response status code and response headers
    def product_variant_add_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_variant_add ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProductApi.product_variant_add"
      end
      # resource path
      local_var_path = "/product.variant.add.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20072')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get count variants.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :category_id Counts products’ variants specified by category id
    # @option opts [String] :product_id Retrieves products&#39; variants specified by product id
    # @option opts [String] :store_id Retrieves variants specified by store id
    # @return [InlineResponse20075]
    def product_variant_count(opts = {})
      data, _status_code, _headers = product_variant_count_with_http_info(opts)
      return data
    end

    # 
    # Get count variants.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :category_id Counts products’ variants specified by category id
    # @option opts [String] :product_id Retrieves products&#39; variants specified by product id
    # @option opts [String] :store_id Retrieves variants specified by store id
    # @return [Array<(InlineResponse20075, Fixnum, Hash)>] InlineResponse20075 data, response status code and response headers
    def product_variant_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_variant_count ..."
      end
      # resource path
      local_var_path = "/product.variant.count.json"

      # query parameters
      query_params = {}
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'category_id'] = opts[:'category_id'] if !opts[:'category_id'].nil?
      query_params[:'product_id'] = opts[:'product_id'] if !opts[:'product_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20075')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete variant.
    # @param id Defines variant removal, specified by variant id
    # @param product_id Defines product&#39;s id where the variant has to be deleted
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def product_variant_delete(id, product_id, opts = {})
      data, _status_code, _headers = product_variant_delete_with_http_info(id, product_id, opts)
      return data
    end

    # 
    # Delete variant.
    # @param id Defines variant removal, specified by variant id
    # @param product_id Defines product&#39;s id where the variant has to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def product_variant_delete_with_http_info(id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_variant_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_variant_delete"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_variant_delete"
      end
      # resource path
      local_var_path = "/product.variant.delete.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'product_id'] = product_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get variant info.
    # @param id Retrieves variant&#39;s info specified by variant id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,name,description,price)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves variant info specified by store id
    # @return [InlineResponse20032]
    def product_variant_info(id, opts = {})
      data, _status_code, _headers = product_variant_info_with_http_info(id, opts)
      return data
    end

    # 
    # Get variant info.
    # @param id Retrieves variant&#39;s info specified by variant id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves variant info specified by store id
    # @return [Array<(InlineResponse20032, Fixnum, Hash)>] InlineResponse20032 data, response status code and response headers
    def product_variant_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_variant_info ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_variant_info"
      end
      # resource path
      local_var_path = "/product.variant.info.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20032')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list variants.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,name,description,price)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :category_id Retrieves products’ variants specified by category id
    # @option opts [String] :product_id Retrieves products&#39; variants specified by product id
    # @option opts [String] :store_id Retrieves variants specified by store id
    # @return [InlineResponse20074]
    def product_variant_list(opts = {})
      data, _status_code, _headers = product_variant_list_with_http_info(opts)
      return data
    end

    # 
    # Get list variants.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :category_id Retrieves products’ variants specified by category id
    # @option opts [String] :product_id Retrieves products&#39; variants specified by product id
    # @option opts [String] :store_id Retrieves variants specified by store id
    # @return [Array<(InlineResponse20074, Fixnum, Hash)>] InlineResponse20074 data, response status code and response headers
    def product_variant_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_variant_list ..."
      end
      # resource path
      local_var_path = "/product.variant.list.json"

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'category_id'] = opts[:'category_id'] if !opts[:'category_id'].nil?
      query_params[:'product_id'] = opts[:'product_id'] if !opts[:'product_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20074')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add some prices to the product variant.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007]
    def product_variant_price_add(body, opts = {})
      data, _status_code, _headers = product_variant_price_add_with_http_info(body, opts)
      return data
    end

    # 
    # Add some prices to the product variant.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007, Fixnum, Hash)>] InlineResponse2007 data, response status code and response headers
    def product_variant_price_add_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_variant_price_add ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProductApi.product_variant_price_add"
      end
      # resource path
      local_var_path = "/product.variant.price.add.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2007')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_price_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete some prices of the product variant.
    # @param id Defines the variant where the price has to be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_prices Defines variants&#39;s group prices
    # @return [InlineResponse2004]
    def product_variant_price_delete(id, opts = {})
      data, _status_code, _headers = product_variant_price_delete_with_http_info(id, opts)
      return data
    end

    # 
    # Delete some prices of the product variant.
    # @param id Defines the variant where the price has to be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_prices Defines variants&#39;s group prices
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def product_variant_price_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_variant_price_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_variant_price_delete"
      end
      # resource path
      local_var_path = "/product.variant.price.delete.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'group_prices'] = opts[:'group_prices'] if !opts[:'group_prices'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_price_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update some prices of the product variant.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20027]
    def product_variant_price_update(body, opts = {})
      data, _status_code, _headers = product_variant_price_update_with_http_info(body, opts)
      return data
    end

    # 
    # Update some prices of the product variant.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20027, Fixnum, Hash)>] InlineResponse20027 data, response status code and response headers
    def product_variant_price_update_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_variant_price_update ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProductApi.product_variant_price_update"
      end
      # resource path
      local_var_path = "/product.variant.price.update.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20027')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_price_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update variant.
    # @param id Defines variant update specified by variant id
    # @param product_id Defines product&#39;s id where the variant has to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Defines store id where the variant should be found
    # @option opts [String] :warehouse_id This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
    # @option opts [Float] :reserve_quantity This parameter allows to reserve/unreserve product variants quantity.
    # @option opts [Float] :quantity Defines new products&#39; variants quantity
    # @option opts [Float] :increase_quantity Defines the incremental changes in product quantity (default to 0)
    # @option opts [Float] :reduce_quantity Defines the decrement changes in product quantity (default to 0)
    # @option opts [Float] :price Defines new product&#39;s variant price
    # @option opts [Float] :special_price Defines new product&#39;s variant special price
    # @option opts [String] :sprice_create Defines the date of special price creation
    # @option opts [String] :sprice_expire Defines the term of special price offer duration
    # @option opts [BOOLEAN] :manage_stock Defines inventory tracking for product variant
    # @option opts [BOOLEAN] :in_stock Set stock status
    # @option opts [String] :name Defines variant&#39;s name that has to be updated
    # @option opts [String] :description Specifies variant&#39;s description
    # @option opts [String] :sku Defines new product&#39;s variant sku
    # @option opts [String] :meta_title Defines unique meta title for each entity
    # @option opts [String] :meta_description Defines unique meta description of a entity
    # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
    # @option opts [String] :short_description Defines short description
    # @option opts [String] :visible Set visibility status
    # @option opts [String] :status Defines product variant&#39;s status
    # @option opts [Float] :weight Weight (default to 0)
    # @option opts [BOOLEAN] :reindex Is reindex required (default to true)
    # @return [InlineResponse20027]
    def product_variant_update(id, product_id, opts = {})
      data, _status_code, _headers = product_variant_update_with_http_info(id, product_id, opts)
      return data
    end

    # 
    # Update variant.
    # @param id Defines variant update specified by variant id
    # @param product_id Defines product&#39;s id where the variant has to be updated
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Defines store id where the variant should be found
    # @option opts [String] :warehouse_id This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
    # @option opts [Float] :reserve_quantity This parameter allows to reserve/unreserve product variants quantity.
    # @option opts [Float] :quantity Defines new products&#39; variants quantity
    # @option opts [Float] :increase_quantity Defines the incremental changes in product quantity
    # @option opts [Float] :reduce_quantity Defines the decrement changes in product quantity
    # @option opts [Float] :price Defines new product&#39;s variant price
    # @option opts [Float] :special_price Defines new product&#39;s variant special price
    # @option opts [String] :sprice_create Defines the date of special price creation
    # @option opts [String] :sprice_expire Defines the term of special price offer duration
    # @option opts [BOOLEAN] :manage_stock Defines inventory tracking for product variant
    # @option opts [BOOLEAN] :in_stock Set stock status
    # @option opts [String] :name Defines variant&#39;s name that has to be updated
    # @option opts [String] :description Specifies variant&#39;s description
    # @option opts [String] :sku Defines new product&#39;s variant sku
    # @option opts [String] :meta_title Defines unique meta title for each entity
    # @option opts [String] :meta_description Defines unique meta description of a entity
    # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
    # @option opts [String] :short_description Defines short description
    # @option opts [String] :visible Set visibility status
    # @option opts [String] :status Defines product variant&#39;s status
    # @option opts [Float] :weight Weight
    # @option opts [BOOLEAN] :reindex Is reindex required
    # @return [Array<(InlineResponse20027, Fixnum, Hash)>] InlineResponse20027 data, response status code and response headers
    def product_variant_update_with_http_info(id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductApi.product_variant_update ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_variant_update"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_variant_update"
      end
      # resource path
      local_var_path = "/product.variant.update.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'product_id'] = product_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'warehouse_id'] = opts[:'warehouse_id'] if !opts[:'warehouse_id'].nil?
      query_params[:'reserve_quantity'] = opts[:'reserve_quantity'] if !opts[:'reserve_quantity'].nil?
      query_params[:'quantity'] = opts[:'quantity'] if !opts[:'quantity'].nil?
      query_params[:'increase_quantity'] = opts[:'increase_quantity'] if !opts[:'increase_quantity'].nil?
      query_params[:'reduce_quantity'] = opts[:'reduce_quantity'] if !opts[:'reduce_quantity'].nil?
      query_params[:'price'] = opts[:'price'] if !opts[:'price'].nil?
      query_params[:'special_price'] = opts[:'special_price'] if !opts[:'special_price'].nil?
      query_params[:'sprice_create'] = opts[:'sprice_create'] if !opts[:'sprice_create'].nil?
      query_params[:'sprice_expire'] = opts[:'sprice_expire'] if !opts[:'sprice_expire'].nil?
      query_params[:'manage_stock'] = opts[:'manage_stock'] if !opts[:'manage_stock'].nil?
      query_params[:'in_stock'] = opts[:'in_stock'] if !opts[:'in_stock'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'sku'] = opts[:'sku'] if !opts[:'sku'].nil?
      query_params[:'meta_title'] = opts[:'meta_title'] if !opts[:'meta_title'].nil?
      query_params[:'meta_description'] = opts[:'meta_description'] if !opts[:'meta_description'].nil?
      query_params[:'meta_keywords'] = opts[:'meta_keywords'] if !opts[:'meta_keywords'].nil?
      query_params[:'short_description'] = opts[:'short_description'] if !opts[:'short_description'].nil?
      query_params[:'visible'] = opts[:'visible'] if !opts[:'visible'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'weight'] = opts[:'weight'] if !opts[:'weight'].nil?
      query_params[:'reindex'] = opts[:'reindex'] if !opts[:'reindex'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20027')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
