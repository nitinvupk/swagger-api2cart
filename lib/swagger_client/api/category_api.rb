=begin
#Swagger API2Cart

#API2Cart

OpenAPI spec version: 1.1
Contact: contact@api2cart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module SwaggerClient
  class CategoryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Add new category in store
    # @param name Defines category&#39;s name that has to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_id Adds categories specified by parent id
    # @option opts [String] :stores_ids Create category in the stores that is specified by comma-separated stores&#39; id (default to 0)
    # @option opts [String] :store_id Store Id
    # @option opts [BOOLEAN] :avail Defines category&#39;s visibility status (default to true)
    # @option opts [Integer] :sort_order Sort number in the list (default to 0)
    # @option opts [String] :created_time Entity&#39;s date creation
    # @option opts [String] :modified_time Entity&#39;s date modification
    # @option opts [String] :description Defines category&#39;s description
    # @option opts [String] :meta_title Defines unique meta title for each entity
    # @option opts [String] :meta_description Defines unique meta description of a entity
    # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
    # @option opts [String] :seo_url Defines unique category&#39;s URL for SEO
    # @return [InlineResponse20040]
    def category_add(name, opts = {})
      data, _status_code, _headers = category_add_with_http_info(name, opts)
      return data
    end

    # 
    # Add new category in store
    # @param name Defines category&#39;s name that has to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_id Adds categories specified by parent id
    # @option opts [String] :stores_ids Create category in the stores that is specified by comma-separated stores&#39; id
    # @option opts [String] :store_id Store Id
    # @option opts [BOOLEAN] :avail Defines category&#39;s visibility status
    # @option opts [Integer] :sort_order Sort number in the list
    # @option opts [String] :created_time Entity&#39;s date creation
    # @option opts [String] :modified_time Entity&#39;s date modification
    # @option opts [String] :description Defines category&#39;s description
    # @option opts [String] :meta_title Defines unique meta title for each entity
    # @option opts [String] :meta_description Defines unique meta description of a entity
    # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
    # @option opts [String] :seo_url Defines unique category&#39;s URL for SEO
    # @return [Array<(InlineResponse20040, Fixnum, Hash)>] InlineResponse20040 data, response status code and response headers
    def category_add_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CategoryApi.category_add ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CategoryApi.category_add"
      end
      # resource path
      local_var_path = "/category.add.json"

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'parent_id'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'stores_ids'] = opts[:'stores_ids'] if !opts[:'stores_ids'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'created_time'] = opts[:'created_time'] if !opts[:'created_time'].nil?
      query_params[:'modified_time'] = opts[:'modified_time'] if !opts[:'modified_time'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'meta_title'] = opts[:'meta_title'] if !opts[:'meta_title'].nil?
      query_params[:'meta_description'] = opts[:'meta_description'] if !opts[:'meta_description'].nil?
      query_params[:'meta_keywords'] = opts[:'meta_keywords'] if !opts[:'meta_keywords'].nil?
      query_params[:'seo_url'] = opts[:'seo_url'] if !opts[:'seo_url'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20040')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Assign category to product
    # @param product_id Defines category assign to the product, specified by product id
    # @param category_id Defines category assign, specified by category id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20014]
    def category_assign(product_id, category_id, opts = {})
      data, _status_code, _headers = category_assign_with_http_info(product_id, category_id, opts)
      return data
    end

    # 
    # Assign category to product
    # @param product_id Defines category assign to the product, specified by product id
    # @param category_id Defines category assign, specified by category id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20014, Fixnum, Hash)>] InlineResponse20014 data, response status code and response headers
    def category_assign_with_http_info(product_id, category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CategoryApi.category_assign ..."
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling CategoryApi.category_assign"
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling CategoryApi.category_assign"
      end
      # resource path
      local_var_path = "/category.assign.json"

      # query parameters
      query_params = {}
      query_params[:'product_id'] = product_id
      query_params[:'category_id'] = category_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Count categories in store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_id Counts categories specified by parent id
    # @option opts [String] :store_id Counts category specified by store id
    # @option opts [String] :lang_id Counts category specified by language id
    # @return [InlineResponse20037]
    def category_count(opts = {})
      data, _status_code, _headers = category_count_with_http_info(opts)
      return data
    end

    # 
    # Count categories in store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_id Counts categories specified by parent id
    # @option opts [String] :store_id Counts category specified by store id
    # @option opts [String] :lang_id Counts category specified by language id
    # @return [Array<(InlineResponse20037, Fixnum, Hash)>] InlineResponse20037 data, response status code and response headers
    def category_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CategoryApi.category_count ..."
      end
      # resource path
      local_var_path = "/category.count.json"

      # query parameters
      query_params = {}
      query_params[:'parent_id'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20037')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete category in store
    # @param id Defines category removal, specified by category id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def category_delete(id, opts = {})
      data, _status_code, _headers = category_delete_with_http_info(id, opts)
      return data
    end

    # 
    # Delete category in store
    # @param id Defines category removal, specified by category id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def category_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CategoryApi.category_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CategoryApi.category_delete"
      end
      # resource path
      local_var_path = "/category.delete.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Search category in store. \"Laptop\" is specified here by default.
    # @param find_value Entity search that is specified by some value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields (default to name)
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters (default to whole_words)
    # @return [InlineResponse20039]
    def category_find(find_value, opts = {})
      data, _status_code, _headers = category_find_with_http_info(find_value, opts)
      return data
    end

    # 
    # Search category in store. \&quot;Laptop\&quot; is specified here by default.
    # @param find_value Entity search that is specified by some value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters
    # @return [Array<(InlineResponse20039, Fixnum, Hash)>] InlineResponse20039 data, response status code and response headers
    def category_find_with_http_info(find_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CategoryApi.category_find ..."
      end
      # verify the required parameter 'find_value' is set
      if @api_client.config.client_side_validation && find_value.nil?
        fail ArgumentError, "Missing the required parameter 'find_value' when calling CategoryApi.category_find"
      end
      # resource path
      local_var_path = "/category.find.json"

      # query parameters
      query_params = {}
      query_params[:'find_value'] = find_value
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'find_params'] = opts[:'find_params'] if !opts[:'find_params'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20039')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add image to category
    # @param category_id Defines category id where the image should be added
    # @param image_name Defines image&#39;s name
    # @param url Defines URL of the image that has to be added
    # @param type Defines image&#39;s types that are specified by comma-separated list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :label Defines alternative text that has to be attached to the picture
    # @option opts [String] :mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
    # @option opts [Integer] :position Defines image’s position in the list (default to 0)
    # @option opts [String] :store_id Store Id
    # @return [InlineResponse20036]
    def category_image_add(category_id, image_name, url, type, opts = {})
      data, _status_code, _headers = category_image_add_with_http_info(category_id, image_name, url, type, opts)
      return data
    end

    # 
    # Add image to category
    # @param category_id Defines category id where the image should be added
    # @param image_name Defines image&#39;s name
    # @param url Defines URL of the image that has to be added
    # @param type Defines image&#39;s types that are specified by comma-separated list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :label Defines alternative text that has to be attached to the picture
    # @option opts [String] :mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
    # @option opts [Integer] :position Defines image’s position in the list
    # @option opts [String] :store_id Store Id
    # @return [Array<(InlineResponse20036, Fixnum, Hash)>] InlineResponse20036 data, response status code and response headers
    def category_image_add_with_http_info(category_id, image_name, url, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CategoryApi.category_image_add ..."
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling CategoryApi.category_image_add"
      end
      # verify the required parameter 'image_name' is set
      if @api_client.config.client_side_validation && image_name.nil?
        fail ArgumentError, "Missing the required parameter 'image_name' when calling CategoryApi.category_image_add"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling CategoryApi.category_image_add"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling CategoryApi.category_image_add"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['base', 'thumbnail'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of base, thumbnail"
      end
      # resource path
      local_var_path = "/category.image.add.json"

      # query parameters
      query_params = {}
      query_params[:'category_id'] = category_id
      query_params[:'image_name'] = image_name
      query_params[:'url'] = url
      query_params[:'type'] = type
      query_params[:'label'] = opts[:'label'] if !opts[:'label'].nil?
      query_params[:'mime'] = opts[:'mime'] if !opts[:'mime'].nil?
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20036')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_image_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete image
    # @param category_id Defines category id where the image should be deleted
    # @param image_id Define image id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [InlineResponse2004]
    def category_image_delete(category_id, image_id, opts = {})
      data, _status_code, _headers = category_image_delete_with_http_info(category_id, image_id, opts)
      return data
    end

    # 
    # Delete image
    # @param category_id Defines category id where the image should be deleted
    # @param image_id Define image id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def category_image_delete_with_http_info(category_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CategoryApi.category_image_delete ..."
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling CategoryApi.category_image_delete"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling CategoryApi.category_image_delete"
      end
      # resource path
      local_var_path = "/category.image.delete.json"

      # query parameters
      query_params = {}
      query_params[:'category_id'] = category_id
      query_params[:'image_id'] = image_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_image_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get category info about category ID*** or specify other category ID.
    # @param id Retrieves category&#39;s info specified by category id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,parent_id,name,description)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves category info  specified by store id
    # @option opts [String] :lang_id Retrieves category info  specified by language id
    # @return [InlineResponse20038]
    def category_info(id, opts = {})
      data, _status_code, _headers = category_info_with_http_info(id, opts)
      return data
    end

    # 
    # Get category info about category ID*** or specify other category ID.
    # @param id Retrieves category&#39;s info specified by category id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves category info  specified by store id
    # @option opts [String] :lang_id Retrieves category info  specified by language id
    # @return [Array<(InlineResponse20038, Fixnum, Hash)>] InlineResponse20038 data, response status code and response headers
    def category_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CategoryApi.category_info ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CategoryApi.category_info"
      end
      # resource path
      local_var_path = "/category.info.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20038')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of categories from store. Returns 4 categories by default.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :parent_id Retrieves categories specified by parent id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,parent_id,name,description)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves categories specified by store id
    # @option opts [String] :lang_id Retrieves categorys specified by language id
    # @return [ModelResponseCategoryList]
    def category_list(opts = {})
      data, _status_code, _headers = category_list_with_http_info(opts)
      return data
    end

    # 
    # Get list of categories from store. Returns 4 categories by default.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :parent_id Retrieves categories specified by parent id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves categories specified by store id
    # @option opts [String] :lang_id Retrieves categorys specified by language id
    # @return [Array<(ModelResponseCategoryList, Fixnum, Hash)>] ModelResponseCategoryList data, response status code and response headers
    def category_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CategoryApi.category_list ..."
      end
      # resource path
      local_var_path = "/category.list.json"

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'parent_id'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelResponseCategoryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Unassign category to product
    # @param category_id Defines category unassign, specified by category id
    # @param product_id Defines category unassign to the product, specified by product id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20014]
    def category_unassign(category_id, product_id, opts = {})
      data, _status_code, _headers = category_unassign_with_http_info(category_id, product_id, opts)
      return data
    end

    # 
    # Unassign category to product
    # @param category_id Defines category unassign, specified by category id
    # @param product_id Defines category unassign to the product, specified by product id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20014, Fixnum, Hash)>] InlineResponse20014 data, response status code and response headers
    def category_unassign_with_http_info(category_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CategoryApi.category_unassign ..."
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling CategoryApi.category_unassign"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling CategoryApi.category_unassign"
      end
      # resource path
      local_var_path = "/category.unassign.json"

      # query parameters
      query_params = {}
      query_params[:'category_id'] = category_id
      query_params[:'product_id'] = product_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20014')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_unassign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update category in store
    # @param id Defines category update specified by category id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Defines new category’s name
    # @option opts [String] :parent_id Defines new parent category id
    # @option opts [String] :stores_ids Update category in the stores that is specified by comma-separated stores&#39; id (default to 0)
    # @option opts [BOOLEAN] :avail Defines category&#39;s visibility status
    # @option opts [Integer] :sort_order Sort number in the list
    # @option opts [String] :modified_time Entity&#39;s date modification
    # @option opts [String] :description Defines new category&#39;s description
    # @option opts [String] :meta_title Defines unique meta title for each entity
    # @option opts [String] :meta_description Defines unique meta description of a entity
    # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
    # @option opts [String] :seo_url Defines unique category&#39;s URL for SEO
    # @return [InlineResponse20027]
    def category_update(id, opts = {})
      data, _status_code, _headers = category_update_with_http_info(id, opts)
      return data
    end

    # 
    # Update category in store
    # @param id Defines category update specified by category id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Defines new category’s name
    # @option opts [String] :parent_id Defines new parent category id
    # @option opts [String] :stores_ids Update category in the stores that is specified by comma-separated stores&#39; id
    # @option opts [BOOLEAN] :avail Defines category&#39;s visibility status
    # @option opts [Integer] :sort_order Sort number in the list
    # @option opts [String] :modified_time Entity&#39;s date modification
    # @option opts [String] :description Defines new category&#39;s description
    # @option opts [String] :meta_title Defines unique meta title for each entity
    # @option opts [String] :meta_description Defines unique meta description of a entity
    # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
    # @option opts [String] :seo_url Defines unique category&#39;s URL for SEO
    # @return [Array<(InlineResponse20027, Fixnum, Hash)>] InlineResponse20027 data, response status code and response headers
    def category_update_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CategoryApi.category_update ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CategoryApi.category_update"
      end
      # resource path
      local_var_path = "/category.update.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'parent_id'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'stores_ids'] = opts[:'stores_ids'] if !opts[:'stores_ids'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'modified_time'] = opts[:'modified_time'] if !opts[:'modified_time'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'meta_title'] = opts[:'meta_title'] if !opts[:'meta_title'].nil?
      query_params[:'meta_description'] = opts[:'meta_description'] if !opts[:'meta_description'].nil?
      query_params[:'meta_keywords'] = opts[:'meta_keywords'] if !opts[:'meta_keywords'].nil?
      query_params[:'seo_url'] = opts[:'seo_url'] if !opts[:'seo_url'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20027')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
