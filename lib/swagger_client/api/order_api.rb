=begin
#Swagger API2Cart

#API2Cart

OpenAPI spec version: 1.1
Contact: contact@api2cart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module SwaggerClient
  class OrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Get list of orders that were left by customers before completing the order.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id Retrieves orders specified by customer id
    # @option opts [String] :customer_email Retrieves orders specified by customer email
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [BOOLEAN] :skip_empty_email Filter empty emails (default to false)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to customer,totals,items)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseOrderAbandonedList]
    def order_abandoned_list(opts = {})
      data, _status_code, _headers = order_abandoned_list_with_http_info(opts)
      return data
    end

    # 
    # Get list of orders that were left by customers before completing the order.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id Retrieves orders specified by customer id
    # @option opts [String] :customer_email Retrieves orders specified by customer email
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [BOOLEAN] :skip_empty_email Filter empty emails
    # @option opts [String] :store_id Store Id
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseOrderAbandonedList, Fixnum, Hash)>] ModelResponseOrderAbandonedList data, response status code and response headers
    def order_abandoned_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_abandoned_list ..."
      end
      # resource path
      local_var_path = "/order.abandoned.list.json"

      # query parameters
      query_params = {}
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'customer_email'] = opts[:'customer_email'] if !opts[:'customer_email'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'skip_empty_email'] = opts[:'skip_empty_email'] if !opts[:'skip_empty_email'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelResponseOrderAbandonedList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_abandoned_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add a new order to the cart.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20044]
    def order_add(body, opts = {})
      data, _status_code, _headers = order_add_with_http_info(body, opts)
      return data
    end

    # 
    # Add a new order to the cart.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20044, Fixnum, Hash)>] InlineResponse20044 data, response status code and response headers
    def order_add_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_add ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrderApi.order_add"
      end
      # resource path
      local_var_path = "/order.add.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20044')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Count orders in store
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id Counts orders quantity specified by customer id
    # @option opts [String] :customer_email Counts orders quantity specified by customer email
    # @option opts [String] :order_status Counts orders quantity specified by order status
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :store_id Counts orders quantity specified by store id
    # @option opts [String] :ids Counts orders specified by ids
    # @option opts [String] :order_ids Counts orders specified by order ids
    # @option opts [String] :ebay_order_status Counts orders quantity specified by order status
    # @option opts [String] :financial_status Counts orders quantity specified by financial status
    # @option opts [String] :fulfillment_status Create order with fulfillment status
    # @option opts [String] :shipping_method Retrieve entities according to shipping method
    # @return [InlineResponse20041]
    def order_count(opts = {})
      data, _status_code, _headers = order_count_with_http_info(opts)
      return data
    end

    # 
    # Count orders in store
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id Counts orders quantity specified by customer id
    # @option opts [String] :customer_email Counts orders quantity specified by customer email
    # @option opts [String] :order_status Counts orders quantity specified by order status
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :store_id Counts orders quantity specified by store id
    # @option opts [String] :ids Counts orders specified by ids
    # @option opts [String] :order_ids Counts orders specified by order ids
    # @option opts [String] :ebay_order_status Counts orders quantity specified by order status
    # @option opts [String] :financial_status Counts orders quantity specified by financial status
    # @option opts [String] :fulfillment_status Create order with fulfillment status
    # @option opts [String] :shipping_method Retrieve entities according to shipping method
    # @return [Array<(InlineResponse20041, Fixnum, Hash)>] InlineResponse20041 data, response status code and response headers
    def order_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_count ..."
      end
      # resource path
      local_var_path = "/order.count.json"

      # query parameters
      query_params = {}
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'customer_email'] = opts[:'customer_email'] if !opts[:'customer_email'].nil?
      query_params[:'order_status'] = opts[:'order_status'] if !opts[:'order_status'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'order_ids'] = opts[:'order_ids'] if !opts[:'order_ids'].nil?
      query_params[:'ebay_order_status'] = opts[:'ebay_order_status'] if !opts[:'ebay_order_status'].nil?
      query_params[:'financial_status'] = opts[:'financial_status'] if !opts[:'financial_status'].nil?
      query_params[:'fulfillment_status'] = opts[:'fulfillment_status'] if !opts[:'fulfillment_status'].nil?
      query_params[:'shipping_method'] = opts[:'shipping_method'] if !opts[:'shipping_method'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20041')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve list of financial statuses
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20046]
    def order_financial_status_list(opts = {})
      data, _status_code, _headers = order_financial_status_list_with_http_info(opts)
      return data
    end

    # 
    # Retrieve list of financial statuses
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20046, Fixnum, Hash)>] InlineResponse20046 data, response status code and response headers
    def order_financial_status_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_financial_status_list ..."
      end
      # resource path
      local_var_path = "/order.financial_status.list.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20046')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_financial_status_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Find orders
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id Retrieves orders specified by customer id
    # @option opts [String] :customer_email Retrieves orders specified by customer email
    # @option opts [String] :order_status Retrieves orders specified by order status
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to order_id,customer,totals,address,items,bundles,status)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :financial_status Retrieves orders specified by financial status
    # @return [InlineResponse20043]
    def order_find(opts = {})
      data, _status_code, _headers = order_find_with_http_info(opts)
      return data
    end

    # 
    # Find orders
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id Retrieves orders specified by customer id
    # @option opts [String] :customer_email Retrieves orders specified by customer email
    # @option opts [String] :order_status Retrieves orders specified by order status
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :financial_status Retrieves orders specified by financial status
    # @return [Array<(InlineResponse20043, Fixnum, Hash)>] InlineResponse20043 data, response status code and response headers
    def order_find_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_find ..."
      end
      # resource path
      local_var_path = "/order.find.json"

      # query parameters
      query_params = {}
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'customer_email'] = opts[:'customer_email'] if !opts[:'customer_email'].nil?
      query_params[:'order_status'] = opts[:'order_status'] if !opts[:'order_status'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'financial_status'] = opts[:'financial_status'] if !opts[:'financial_status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20043')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Info about a specific order by ID
    # @param order_id Retrieves order’s info specified by order id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to order_id,customer,totals,address,items,bundles,status)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Defines store id where the order should be found
    # @return [InlineResponse20042]
    def order_info(order_id, opts = {})
      data, _status_code, _headers = order_info_with_http_info(order_id, opts)
      return data
    end

    # 
    # Info about a specific order by ID
    # @param order_id Retrieves order’s info specified by order id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Defines store id where the order should be found
    # @return [Array<(InlineResponse20042, Fixnum, Hash)>] InlineResponse20042 data, response status code and response headers
    def order_info_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_info ..."
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.order_info"
      end
      # resource path
      local_var_path = "/order.info.json"

      # query parameters
      query_params = {}
      query_params[:'order_id'] = order_id
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20042')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of orders from store. Returns 4 orders by default.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id Retrieves orders specified by customer id
    # @option opts [String] :customer_email Retrieves orders specified by customer email
    # @option opts [String] :order_status Retrieves orders specified by order status
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :sort_by Set field to sort by (default to order_id)
    # @option opts [String] :sort_direction Set sorting direction (default to asc)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to order_id,customer,totals,address,items,bundles,status)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :store_id Store Id
    # @option opts [String] :ids Retrieves orders specified by ids
    # @option opts [String] :order_ids Retrieves orders specified by order ids
    # @option opts [String] :ebay_order_status Retrieves orders specified by order status
    # @option opts [String] :basket_id Retrieves order’s info specified by basket id.
    # @option opts [String] :financial_status Retrieves orders specified by financial status
    # @option opts [String] :fulfillment_status Create order with fulfillment status
    # @option opts [String] :shipping_method Retrieve entities according to shipping method
    # @option opts [String] :skip_order_ids Skipped orders by ids
    # @option opts [Integer] :since_id Retrieve entities starting from the specified id.
    # @option opts [BOOLEAN] :is_deleted Filter deleted orders
    # @option opts [String] :shipping_country_iso3 Retrieve entities according to shipping country
    # @return [ModelResponseOrderList]
    def order_list(opts = {})
      data, _status_code, _headers = order_list_with_http_info(opts)
      return data
    end

    # 
    # Get list of orders from store. Returns 4 orders by default.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_id Retrieves orders specified by customer id
    # @option opts [String] :customer_email Retrieves orders specified by customer email
    # @option opts [String] :order_status Retrieves orders specified by order status
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :page_cursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :sort_by Set field to sort by
    # @option opts [String] :sort_direction Set sorting direction
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :store_id Store Id
    # @option opts [String] :ids Retrieves orders specified by ids
    # @option opts [String] :order_ids Retrieves orders specified by order ids
    # @option opts [String] :ebay_order_status Retrieves orders specified by order status
    # @option opts [String] :basket_id Retrieves order’s info specified by basket id.
    # @option opts [String] :financial_status Retrieves orders specified by financial status
    # @option opts [String] :fulfillment_status Create order with fulfillment status
    # @option opts [String] :shipping_method Retrieve entities according to shipping method
    # @option opts [String] :skip_order_ids Skipped orders by ids
    # @option opts [Integer] :since_id Retrieve entities starting from the specified id.
    # @option opts [BOOLEAN] :is_deleted Filter deleted orders
    # @option opts [String] :shipping_country_iso3 Retrieve entities according to shipping country
    # @return [Array<(ModelResponseOrderList, Fixnum, Hash)>] ModelResponseOrderList data, response status code and response headers
    def order_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_list ..."
      end
      # resource path
      local_var_path = "/order.list.json"

      # query parameters
      query_params = {}
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'customer_email'] = opts[:'customer_email'] if !opts[:'customer_email'].nil?
      query_params[:'order_status'] = opts[:'order_status'] if !opts[:'order_status'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_direction'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'order_ids'] = opts[:'order_ids'] if !opts[:'order_ids'].nil?
      query_params[:'ebay_order_status'] = opts[:'ebay_order_status'] if !opts[:'ebay_order_status'].nil?
      query_params[:'basket_id'] = opts[:'basket_id'] if !opts[:'basket_id'].nil?
      query_params[:'financial_status'] = opts[:'financial_status'] if !opts[:'financial_status'].nil?
      query_params[:'fulfillment_status'] = opts[:'fulfillment_status'] if !opts[:'fulfillment_status'].nil?
      query_params[:'shipping_method'] = opts[:'shipping_method'] if !opts[:'shipping_method'].nil?
      query_params[:'skip_order_ids'] = opts[:'skip_order_ids'] if !opts[:'skip_order_ids'].nil?
      query_params[:'since_id'] = opts[:'since_id'] if !opts[:'since_id'].nil?
      query_params[:'is_deleted'] = opts[:'is_deleted'] if !opts[:'is_deleted'].nil?
      query_params[:'shipping_country_iso3'] = opts[:'shipping_country_iso3'] if !opts[:'shipping_country_iso3'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelResponseOrderList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add a refund to the order.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20049]
    def order_refund_add(body, opts = {})
      data, _status_code, _headers = order_refund_add_with_http_info(body, opts)
      return data
    end

    # 
    # Add a refund to the order.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20049, Fixnum, Hash)>] InlineResponse20049 data, response status code and response headers
    def order_refund_add_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_refund_add ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrderApi.order_refund_add"
      end
      # resource path
      local_var_path = "/order.refund.add.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20049')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_refund_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add a shipment to the order.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20047]
    def order_shipment_add(body, opts = {})
      data, _status_code, _headers = order_shipment_add_with_http_info(body, opts)
      return data
    end

    # 
    # Add a shipment to the order.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20047, Fixnum, Hash)>] InlineResponse20047 data, response status code and response headers
    def order_shipment_add_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_shipment_add ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrderApi.order_shipment_add"
      end
      # resource path
      local_var_path = "/order.shipment.add.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20047')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_shipment_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of shipments by orders.
    # @param order_id Retrieves shipments specified by order id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,order_id,items,tracking_numbers)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :store_id Store Id
    # @return [ModelResponseOrderShipmentList]
    def order_shipment_list(order_id, opts = {})
      data, _status_code, _headers = order_shipment_list_with_http_info(order_id, opts)
      return data
    end

    # 
    # Get list of shipments by orders.
    # @param order_id Retrieves shipments specified by order id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :store_id Store Id
    # @return [Array<(ModelResponseOrderShipmentList, Fixnum, Hash)>] ModelResponseOrderShipmentList data, response status code and response headers
    def order_shipment_list_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_shipment_list ..."
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.order_shipment_list"
      end
      # resource path
      local_var_path = "/order.shipment.list.json"

      # query parameters
      query_params = {}
      query_params[:'order_id'] = order_id
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelResponseOrderShipmentList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_shipment_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Add order shipment's tracking info.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20048]
    def order_shipment_tracking_add(body, opts = {})
      data, _status_code, _headers = order_shipment_tracking_add_with_http_info(body, opts)
      return data
    end

    # 
    # Add order shipment&#39;s tracking info.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20048, Fixnum, Hash)>] InlineResponse20048 data, response status code and response headers
    def order_shipment_tracking_add_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_shipment_tracking_add ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrderApi.order_shipment_tracking_add"
      end
      # resource path
      local_var_path = "/order.shipment.tracking.add.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20048')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_shipment_tracking_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update order's shipment information.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20027]
    def order_shipment_update(body, opts = {})
      data, _status_code, _headers = order_shipment_update_with_http_info(body, opts)
      return data
    end

    # 
    # Update order&#39;s shipment information.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20027, Fixnum, Hash)>] InlineResponse20027 data, response status code and response headers
    def order_shipment_update_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_shipment_update ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrderApi.order_shipment_update"
      end
      # resource path
      local_var_path = "/order.shipment.update.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20027')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_shipment_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve list of statuses
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20045]
    def order_status_list(opts = {})
      data, _status_code, _headers = order_status_list_with_http_info(opts)
      return data
    end

    # 
    # Retrieve list of statuses
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20045, Fixnum, Hash)>] InlineResponse20045 data, response status code and response headers
    def order_status_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_status_list ..."
      end
      # resource path
      local_var_path = "/order.status.list.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20045')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_status_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update existing order.
    # @param order_id Defines the orders specified by order id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Defines store id where the order should be found
    # @option opts [String] :order_status Defines new order&#39;s status
    # @option opts [String] :comment Specifies order comment
    # @option opts [String] :date_modified Specifies order&#39;s  modification date
    # @option opts [String] :date_finished Specifies order&#39;s  finished date
    # @option opts [String] :financial_status Update order financial status to specified
    # @option opts [String] :order_payment_method Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39;
    # @option opts [BOOLEAN] :send_notifications Send notifications to customer after order was created (default to false)
    # @return [InlineResponse20027]
    def order_update(order_id, opts = {})
      data, _status_code, _headers = order_update_with_http_info(order_id, opts)
      return data
    end

    # 
    # Update existing order.
    # @param order_id Defines the orders specified by order id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Defines store id where the order should be found
    # @option opts [String] :order_status Defines new order&#39;s status
    # @option opts [String] :comment Specifies order comment
    # @option opts [String] :date_modified Specifies order&#39;s  modification date
    # @option opts [String] :date_finished Specifies order&#39;s  finished date
    # @option opts [String] :financial_status Update order financial status to specified
    # @option opts [String] :order_payment_method Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39;
    # @option opts [BOOLEAN] :send_notifications Send notifications to customer after order was created
    # @return [Array<(InlineResponse20027, Fixnum, Hash)>] InlineResponse20027 data, response status code and response headers
    def order_update_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.order_update ..."
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.order_update"
      end
      # resource path
      local_var_path = "/order.update.json"

      # query parameters
      query_params = {}
      query_params[:'order_id'] = order_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'order_status'] = opts[:'order_status'] if !opts[:'order_status'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?
      query_params[:'date_modified'] = opts[:'date_modified'] if !opts[:'date_modified'].nil?
      query_params[:'date_finished'] = opts[:'date_finished'] if !opts[:'date_finished'].nil?
      query_params[:'financial_status'] = opts[:'financial_status'] if !opts[:'financial_status'].nil?
      query_params[:'order_payment_method'] = opts[:'order_payment_method'] if !opts[:'order_payment_method'].nil?
      query_params[:'send_notifications'] = opts[:'send_notifications'] if !opts[:'send_notifications'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20027')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
