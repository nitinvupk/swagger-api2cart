=begin
#Swagger API2Cart

#API2Cart

OpenAPI spec version: 1.1
Contact: contact@api2cart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module SwaggerClient
  class AttributeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Add new attribute
    # @param type Defines attribute&#39;s type
    # @param name Defines attributes&#39;s name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Entity code
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [BOOLEAN] :visible Set visibility status (default to false)
    # @option opts [BOOLEAN] :required Defines if the option is required (default to false)
    # @option opts [Integer] :position Attribute&#x60;s position (default to 0)
    # @option opts [String] :attribute_group_id Filter by attribute_group_id
    # @option opts [String] :is_global Attribute saving scope (default to Store)
    # @option opts [BOOLEAN] :is_searchable Use attribute in Quick Search (default to false)
    # @option opts [String] :is_filterable Use In Layered Navigation (default to No)
    # @option opts [BOOLEAN] :is_comparable Comparable on Front-end (default to false)
    # @option opts [BOOLEAN] :is_html_allowed_on_front Allow HTML Tags on Frontend (default to false)
    # @option opts [BOOLEAN] :is_filterable_in_search Use In Search Results Layered Navigation (default to false)
    # @option opts [BOOLEAN] :is_configurable Use To Create Configurable Product (default to false)
    # @option opts [BOOLEAN] :is_visible_in_advanced_search Use in Advanced Search (default to false)
    # @option opts [BOOLEAN] :is_used_for_promo_rules Use for Promo Rule Conditions (default to false)
    # @option opts [BOOLEAN] :used_in_product_listing Used in Product Listing (default to false)
    # @option opts [BOOLEAN] :used_for_sort_by Used for Sorting in Product Listing (default to false)
    # @option opts [String] :apply_to Types of products which can have this attribute (default to all_types)
    # @return [InlineResponse200]
    def attribute_add(type, name, opts = {})
      data, _status_code, _headers = attribute_add_with_http_info(type, name, opts)
      return data
    end

    # 
    # Add new attribute
    # @param type Defines attribute&#39;s type
    # @param name Defines attributes&#39;s name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Entity code
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [BOOLEAN] :visible Set visibility status
    # @option opts [BOOLEAN] :required Defines if the option is required
    # @option opts [Integer] :position Attribute&#x60;s position
    # @option opts [String] :attribute_group_id Filter by attribute_group_id
    # @option opts [String] :is_global Attribute saving scope
    # @option opts [BOOLEAN] :is_searchable Use attribute in Quick Search
    # @option opts [String] :is_filterable Use In Layered Navigation
    # @option opts [BOOLEAN] :is_comparable Comparable on Front-end
    # @option opts [BOOLEAN] :is_html_allowed_on_front Allow HTML Tags on Frontend
    # @option opts [BOOLEAN] :is_filterable_in_search Use In Search Results Layered Navigation
    # @option opts [BOOLEAN] :is_configurable Use To Create Configurable Product
    # @option opts [BOOLEAN] :is_visible_in_advanced_search Use in Advanced Search
    # @option opts [BOOLEAN] :is_used_for_promo_rules Use for Promo Rule Conditions
    # @option opts [BOOLEAN] :used_in_product_listing Used in Product Listing
    # @option opts [BOOLEAN] :used_for_sort_by Used for Sorting in Product Listing
    # @option opts [String] :apply_to Types of products which can have this attribute
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def attribute_add_with_http_info(type, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttributeApi.attribute_add ..."
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling AttributeApi.attribute_add"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['text', 'select', 'textarea', 'date', 'price', 'multiselect', 'boolean'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of text, select, textarea, date, price, multiselect, boolean"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AttributeApi.attribute_add"
      end
      # resource path
      local_var_path = "/attribute.add.json"

      # query parameters
      query_params = {}
      query_params[:'type'] = type
      query_params[:'name'] = name
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'visible'] = opts[:'visible'] if !opts[:'visible'].nil?
      query_params[:'required'] = opts[:'required'] if !opts[:'required'].nil?
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'attribute_group_id'] = opts[:'attribute_group_id'] if !opts[:'attribute_group_id'].nil?
      query_params[:'is_global'] = opts[:'is_global'] if !opts[:'is_global'].nil?
      query_params[:'is_searchable'] = opts[:'is_searchable'] if !opts[:'is_searchable'].nil?
      query_params[:'is_filterable'] = opts[:'is_filterable'] if !opts[:'is_filterable'].nil?
      query_params[:'is_comparable'] = opts[:'is_comparable'] if !opts[:'is_comparable'].nil?
      query_params[:'is_html_allowed_on_front'] = opts[:'is_html_allowed_on_front'] if !opts[:'is_html_allowed_on_front'].nil?
      query_params[:'is_filterable_in_search'] = opts[:'is_filterable_in_search'] if !opts[:'is_filterable_in_search'].nil?
      query_params[:'is_configurable'] = opts[:'is_configurable'] if !opts[:'is_configurable'].nil?
      query_params[:'is_visible_in_advanced_search'] = opts[:'is_visible_in_advanced_search'] if !opts[:'is_visible_in_advanced_search'].nil?
      query_params[:'is_used_for_promo_rules'] = opts[:'is_used_for_promo_rules'] if !opts[:'is_used_for_promo_rules'].nil?
      query_params[:'used_in_product_listing'] = opts[:'used_in_product_listing'] if !opts[:'used_in_product_listing'].nil?
      query_params[:'used_for_sort_by'] = opts[:'used_for_sort_by'] if !opts[:'used_for_sort_by'].nil?
      query_params[:'apply_to'] = opts[:'apply_to'] if !opts[:'apply_to'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Assign attribute to the group
    # @param id Entity id
    # @param group_id Attribute group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_set_id Attribute set id
    # @return [InlineResponse20061]
    def attribute_assign_group(id, group_id, opts = {})
      data, _status_code, _headers = attribute_assign_group_with_http_info(id, group_id, opts)
      return data
    end

    # 
    # Assign attribute to the group
    # @param id Entity id
    # @param group_id Attribute group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_set_id Attribute set id
    # @return [Array<(InlineResponse20061, Fixnum, Hash)>] InlineResponse20061 data, response status code and response headers
    def attribute_assign_group_with_http_info(id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttributeApi.attribute_assign_group ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_assign_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AttributeApi.attribute_assign_group"
      end
      # resource path
      local_var_path = "/attribute.assign.group.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'group_id'] = group_id
      query_params[:'attribute_set_id'] = opts[:'attribute_set_id'] if !opts[:'attribute_set_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20061')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_assign_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Assign attribute to the attribute set
    # @param id Entity id
    # @param attribute_set_id Attribute set id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Attribute group_id
    # @return [InlineResponse20061]
    def attribute_assign_set(id, attribute_set_id, opts = {})
      data, _status_code, _headers = attribute_assign_set_with_http_info(id, attribute_set_id, opts)
      return data
    end

    # 
    # Assign attribute to the attribute set
    # @param id Entity id
    # @param attribute_set_id Attribute set id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Attribute group_id
    # @return [Array<(InlineResponse20061, Fixnum, Hash)>] InlineResponse20061 data, response status code and response headers
    def attribute_assign_set_with_http_info(id, attribute_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttributeApi.attribute_assign_set ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_assign_set"
      end
      # verify the required parameter 'attribute_set_id' is set
      if @api_client.config.client_side_validation && attribute_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'attribute_set_id' when calling AttributeApi.attribute_assign_set"
      end
      # resource path
      local_var_path = "/attribute.assign.set.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'attribute_set_id'] = attribute_set_id
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20061')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_assign_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get attribute_set list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,name)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [InlineResponse20063]
    def attribute_attributeset_list(opts = {})
      data, _status_code, _headers = attribute_attributeset_list_with_http_info(opts)
      return data
    end

    # 
    # Get attribute_set list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(InlineResponse20063, Fixnum, Hash)>] InlineResponse20063 data, response status code and response headers
    def attribute_attributeset_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttributeApi.attribute_attributeset_list ..."
      end
      # resource path
      local_var_path = "/attribute.attributeset.list.json"

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20063')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_attributeset_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get attributes count
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Defines attribute&#39;s type
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [BOOLEAN] :visible Filter items by visibility status
    # @option opts [BOOLEAN] :required Defines if the option is required
    # @option opts [BOOLEAN] :system True if attribute is system
    # @return [InlineResponse20059]
    def attribute_count(opts = {})
      data, _status_code, _headers = attribute_count_with_http_info(opts)
      return data
    end

    # 
    # Get attributes count
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Defines attribute&#39;s type
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [BOOLEAN] :visible Filter items by visibility status
    # @option opts [BOOLEAN] :required Defines if the option is required
    # @option opts [BOOLEAN] :system True if attribute is system
    # @return [Array<(InlineResponse20059, Fixnum, Hash)>] InlineResponse20059 data, response status code and response headers
    def attribute_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttributeApi.attribute_count ..."
      end
      # resource path
      local_var_path = "/attribute.count.json"

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'visible'] = opts[:'visible'] if !opts[:'visible'].nil?
      query_params[:'required'] = opts[:'required'] if !opts[:'required'].nil?
      query_params[:'system'] = opts[:'system'] if !opts[:'system'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20059')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete attribute from store
    # @param id Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [InlineResponse2004]
    def attribute_delete(id, opts = {})
      data, _status_code, _headers = attribute_delete_with_http_info(id, opts)
      return data
    end

    # 
    # Delete attribute from store
    # @param id Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def attribute_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttributeApi.attribute_delete ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_delete"
      end
      # resource path
      local_var_path = "/attribute.delete.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get attribute group list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :lang_id Language id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,name)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :attribute_set_id Attribute set id
    # @return [InlineResponse20063]
    def attribute_group_list(opts = {})
      data, _status_code, _headers = attribute_group_list_with_http_info(opts)
      return data
    end

    # 
    # Get attribute group list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :lang_id Language id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :attribute_set_id Attribute set id
    # @return [Array<(InlineResponse20063, Fixnum, Hash)>] InlineResponse20063 data, response status code and response headers
    def attribute_group_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttributeApi.attribute_group_list ..."
      end
      # resource path
      local_var_path = "/attribute.group.list.json"

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'attribute_set_id'] = opts[:'attribute_set_id'] if !opts[:'attribute_set_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20063')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_group_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get attribute info
    # @param id Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to force_all)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [InlineResponse20058]
    def attribute_info(id, opts = {})
      data, _status_code, _headers = attribute_info_with_http_info(id, opts)
      return data
    end

    # 
    # Get attribute info
    # @param id Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(InlineResponse20058, Fixnum, Hash)>] InlineResponse20058 data, response status code and response headers
    def attribute_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttributeApi.attribute_info ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_info"
      end
      # resource path
      local_var_path = "/attribute.info.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20058')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get attributes list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :type Defines attribute&#39;s type
    # @option opts [String] :attribute_ids Filter attributes by ids
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Retrieves attributes on specified language id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to id,name,code,type)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [BOOLEAN] :visible Filter items by visibility status
    # @option opts [BOOLEAN] :required Defines if the option is required
    # @option opts [BOOLEAN] :system True if attribute is system
    # @return [InlineResponse20057]
    def attribute_list(opts = {})
      data, _status_code, _headers = attribute_list_with_http_info(opts)
      return data
    end

    # 
    # Get attributes list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
    # @option opts [String] :type Defines attribute&#39;s type
    # @option opts [String] :attribute_ids Filter attributes by ids
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Retrieves attributes on specified language id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [BOOLEAN] :visible Filter items by visibility status
    # @option opts [BOOLEAN] :required Defines if the option is required
    # @option opts [BOOLEAN] :system True if attribute is system
    # @return [Array<(InlineResponse20057, Fixnum, Hash)>] InlineResponse20057 data, response status code and response headers
    def attribute_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttributeApi.attribute_list ..."
      end
      # resource path
      local_var_path = "/attribute.list.json"

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'attribute_ids'] = opts[:'attribute_ids'] if !opts[:'attribute_ids'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'visible'] = opts[:'visible'] if !opts[:'visible'].nil?
      query_params[:'required'] = opts[:'required'] if !opts[:'required'].nil?
      query_params[:'system'] = opts[:'system'] if !opts[:'system'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20057')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get list of supported attributes types
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20060]
    def attribute_type_list(opts = {})
      data, _status_code, _headers = attribute_type_list_with_http_info(opts)
      return data
    end

    # 
    # Get list of supported attributes types
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20060, Fixnum, Hash)>] InlineResponse20060 data, response status code and response headers
    def attribute_type_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttributeApi.attribute_type_list ..."
      end
      # resource path
      local_var_path = "/attribute.type.list.json"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20060')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_type_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Unassign attribute from group
    # @param id Entity id
    # @param group_id Customer group_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20062]
    def attribute_unassign_group(id, group_id, opts = {})
      data, _status_code, _headers = attribute_unassign_group_with_http_info(id, group_id, opts)
      return data
    end

    # 
    # Unassign attribute from group
    # @param id Entity id
    # @param group_id Customer group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20062, Fixnum, Hash)>] InlineResponse20062 data, response status code and response headers
    def attribute_unassign_group_with_http_info(id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttributeApi.attribute_unassign_group ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_unassign_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AttributeApi.attribute_unassign_group"
      end
      # resource path
      local_var_path = "/attribute.unassign.group.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'group_id'] = group_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20062')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_unassign_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Unassign attribute from attribute set
    # @param id Entity id
    # @param attribute_set_id Attribute set id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20062]
    def attribute_unassign_set(id, attribute_set_id, opts = {})
      data, _status_code, _headers = attribute_unassign_set_with_http_info(id, attribute_set_id, opts)
      return data
    end

    # 
    # Unassign attribute from attribute set
    # @param id Entity id
    # @param attribute_set_id Attribute set id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20062, Fixnum, Hash)>] InlineResponse20062 data, response status code and response headers
    def attribute_unassign_set_with_http_info(id, attribute_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttributeApi.attribute_unassign_set ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_unassign_set"
      end
      # verify the required parameter 'attribute_set_id' is set
      if @api_client.config.client_side_validation && attribute_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'attribute_set_id' when calling AttributeApi.attribute_unassign_set"
      end
      # resource path
      local_var_path = "/attribute.unassign.set.json"

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'attribute_set_id'] = attribute_set_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key', 'store_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse20062')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_unassign_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
