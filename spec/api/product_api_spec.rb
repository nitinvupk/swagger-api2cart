=begin
#Swagger API2Cart

#API2Cart

OpenAPI spec version: 1.1
Contact: contact@api2cart.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ProductApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ProductApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ProductApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ProductApi' do
    it 'should create an instance of ProductApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ProductApi)
    end
  end

  # unit tests for product_add
  # 
  # Add new product to store.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20034]
  describe 'product_add test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_attribute_list
  # 
  # Get list of attributes and values.
  # @param product_id Retrieves attributes specified by product id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :attribute_id Retrieves info for specified attribute_id
  # @option opts [String] :attribute_group_id Filter by attribute_group_id
  # @option opts [String] :set_name Retrieves attributes specified by set_name in Magento
  # @option opts [String] :lang_id Retrieves attributes specified by language id
  # @option opts [String] :store_id Retrieves attributes specified by store id
  # @option opts [String] :sort_by Set field to sort by
  # @option opts [String] :sort_direction Set sorting direction
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [ModelResponseProductAttributeList]
  describe 'product_attribute_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_attribute_value_set
  # 
  # Set attribute value to product.
  # @param product_id Defines product id where the attribute should be added
  # @param [Hash] opts the optional parameters
  # @option opts [String] :attribute_id Filter by attribute_id
  # @option opts [String] :attribute_group_id Filter by attribute_group_id
  # @option opts [String] :attribute_name Define attribute name
  # @option opts [String] :value Define attribute value
  # @option opts [Integer] :value_id Define attribute value id
  # @option opts [String] :lang_id Language id
  # @option opts [String] :store_id Store Id
  # @return [InlineResponse20064]
  describe 'product_attribute_value_set test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_attribute_value_unset
  # 
  # Removes attribute value for a product.
  # @param product_id Product id
  # @param attribute_id Attribute Id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @option opts [BOOLEAN] :include_default Boolean, whether or not to unset default value of the attribute, if applicable
  # @option opts [BOOLEAN] :reindex Is reindex required
  # @option opts [BOOLEAN] :clear_cache Is cache clear required
  # @return [InlineResponse20065]
  describe 'product_attribute_value_unset test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_brand_list
  # 
  # Get list of brands from your store.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :brand_ids Retrieves brands specified by brand ids
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @option opts [String] :store_id Store Id
  # @option opts [String] :lang_id Language id
  # @option opts [String] :created_from Retrieve entities from their creation date
  # @option opts [String] :created_to Retrieve entities to their creation date
  # @option opts [String] :modified_from Retrieve entities from their modification date
  # @option opts [String] :modified_to Retrieve entities to their modification date
  # @return [InlineResponse20078]
  describe 'product_brand_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_child_item_find
  # 
  # Search product child item (bundled item or configurable product variant) in store catalog.
  # @param find_value Entity search that is specified by some value
  # @param [Hash] opts the optional parameters
  # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields
  # @option opts [String] :find_params Entity search that is specified by comma-separated parameters
  # @option opts [String] :store_id Store Id
  # @return [InlineResponse20014]
  describe 'product_child_item_find test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_child_item_info
  # 
  # Get child for specific product.
  # @param product_id Filter by parent product id
  # @param id Entity id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @option opts [String] :store_id Store Id
  # @return [InlineResponse20073]
  describe 'product_child_item_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_child_item_list
  # 
  # Get child items list of specific product(s).
  # @param product_id Filter by parent product id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :page_cursor Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @option opts [String] :created_from Retrieve entities from their creation date
  # @option opts [String] :created_to Retrieve entities to their creation date
  # @option opts [String] :modified_from Retrieve entities from their modification date
  # @option opts [String] :modified_to Retrieve entities to their modification date
  # @option opts [String] :product_ids Filter by parent product id
  # @option opts [String] :store_id Store Id
  # @option opts [String] :lang_id Language id
  # @option opts [String] :currency_id Currency Id
  # @option opts [BOOLEAN] :avail_sale Specifies the set of available/not available products for sale
  # @option opts [String] :report_request_id Report request id
  # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request
  # @return [ModelResponseProductChildItemList]
  describe 'product_child_item_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_count
  # 
  # Count products in store.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :category_id Counts products specified by category id
  # @option opts [String] :created_from Retrieve entities from their creation date
  # @option opts [String] :created_to Retrieve entities to their creation date
  # @option opts [String] :modified_from Retrieve entities from their modification date
  # @option opts [String] :modified_to Retrieve entities to their modification date
  # @option opts [BOOLEAN] :avail_view Specifies the set of visible/invisible products
  # @option opts [BOOLEAN] :avail_sale Specifies the set of available/not available products for sale
  # @option opts [String] :store_id Counts products specified by store id
  # @option opts [String] :lang_id Counts products specified by language id
  # @option opts [String] :product_ids Counts products specified by product ids
  # @option opts [String] :report_request_id Report request id
  # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request
  # @return [InlineResponse20031]
  describe 'product_count test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_currency_add
  # 
  # Add currency and/or set default in store
  # @param iso3 Specifies standardized currency code
  # @param rate Defines the numerical identifier against to the major currency
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name Defines currency&#39;s name
  # @option opts [BOOLEAN] :avail Specifies whether the currency is available
  # @option opts [String] :symbol_left Defines the symbol that is located before the currency
  # @option opts [String] :symbol_right Defines the symbol that is located after the currency
  # @option opts [BOOLEAN] :default Specifies currency&#39;s default meaning
  # @return [InlineResponse20079]
  describe 'product_currency_add test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_currency_list
  # 
  # Get list of currencies
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @option opts [BOOLEAN] :default Specifies the set of default/not default currencies
  # @option opts [BOOLEAN] :avail Specifies the set of available/not available currencies
  # @return [InlineResponse20080]
  describe 'product_currency_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_delete
  # 
  # Product delete
  # @param id Product id that will be removed
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20035]
  describe 'product_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_fields
  # 
  # Retrieve all available fields for product item in store.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20014]
  describe 'product_fields test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_find
  # 
  # Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
  # @param find_value Entity search that is specified by some value
  # @param [Hash] opts the optional parameters
  # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields
  # @option opts [String] :find_params Entity search that is specified by comma-separated parameters
  # @option opts [String] :find_what Parameter&#39;s value specifies the entity that has to be found
  # @return [InlineResponse20033]
  describe 'product_find test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_image_add
  # 
  # Add image to product
  # @param product_id Defines product id where the image should be added
  # @param image_name Defines image&#39;s name
  # @param type Defines image&#39;s types that are specified by comma-separated list
  # @param [Hash] opts the optional parameters
  # @option opts [String] :url Defines URL of the image that has to be added
  # @option opts [String] :label Defines alternative text that has to be attached to the picture
  # @option opts [String] :mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
  # @option opts [Integer] :position Defines image’s position in the list
  # @option opts [String] :content Content(body) encoded in base64 of image file
  # @option opts [Integer] :product_variant_id Defines product&#39;s variants specified by variant id
  # @option opts [String] :variant_ids Defines product&#39;s variants ids
  # @option opts [String] :store_id Store Id
  # @return [InlineResponse20036]
  describe 'product_image_add test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_image_delete
  # 
  # Delete image
  # @param product_id Defines product id where the image should be deleted
  # @param id Entity id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @return [InlineResponse2004]
  describe 'product_image_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_image_update
  # 
  # Update details of image
  # @param product_id Defines product id where the image should be updated
  # @param id Defines image update specified by image id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :image_name Defines image&#39;s name
  # @option opts [String] :type Defines image&#39;s types that are specified by comma-separated list
  # @option opts [String] :label Defines alternative text that has to be attached to the picture
  # @option opts [Integer] :position Defines image’s position in the list
  # @option opts [String] :store_id Store Id
  # @option opts [BOOLEAN] :hidden Define is hide image
  # @return [InlineResponse2005]
  describe 'product_image_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_info
  # 
  # Get product info about product ID *** or specify other product ID.
  # @param id Retrieves product&#39;s info specified by product id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @option opts [String] :store_id Retrieves product info specified by store id
  # @option opts [String] :lang_id Retrieves product info specified by language id
  # @option opts [String] :currency_id Currency Id
  # @option opts [String] :product_variant_params Set this parameter in order to choose which product variants fields you want to retrieve
  # @option opts [String] :report_request_id Report request id
  # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request
  # @return [InlineResponse20032]
  describe 'product_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_list
  # 
  # Get list of products from your store. Returns 10 products by default.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :page_cursor Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @option opts [String] :category_id Retrieves products specified by category id
  # @option opts [String] :created_from Retrieve entities from their creation date
  # @option opts [String] :created_to Retrieve entities to their creation date
  # @option opts [String] :modified_from Retrieve entities from their modification date
  # @option opts [String] :modified_to Retrieve entities to their modification date
  # @option opts [BOOLEAN] :avail_view Specifies the set of visible/invisible products
  # @option opts [BOOLEAN] :avail_sale Specifies the set of available/not available products for sale
  # @option opts [String] :store_id Retrieves products specified by store id
  # @option opts [String] :lang_id Retrieves products specified by language id
  # @option opts [String] :currency_id Currency Id
  # @option opts [String] :product_ids Retrieves products specified by product ids
  # @option opts [String] :product_variant_params Set this parameter in order to choose which product variants fields you want to retrieve
  # @option opts [Integer] :since_id Retrieve entities starting from the specified id.
  # @option opts [String] :report_request_id Report request id
  # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request
  # @option opts [String] :sort_by Set field to sort by
  # @option opts [String] :sort_direction Set sorting direction
  # @option opts [String] :sku Filter by product&#39;s sku
  # @option opts [BOOLEAN] :disable_cache Disable cache for current request
  # @return [ModelResponseProductList]
  describe 'product_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_manufacturer_add
  # 
  # Add manufacturer to store and assign to product
  # @param product_id Defines products specified by product id
  # @param manufacturer Defines product’s manufacturer&#39;s name
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20077]
  describe 'product_manufacturer_add test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_option_add
  # 
  # Add product option from store.
  # @param name Defines option&#39;s name
  # @param type Defines option&#39;s type that has to be added
  # @param [Hash] opts the optional parameters
  # @option opts [String] :product_id Defines product id where the option should be added
  # @option opts [String] :option_values Defines option values that has to be added in Magento
  # @option opts [String] :description Defines option&#39;s description
  # @option opts [BOOLEAN] :avail Defines whether the option is available
  # @option opts [Integer] :sort_order Sort number in the list
  # @option opts [BOOLEAN] :required Defines if the option is required
  # @return [InlineResponse20066]
  describe 'product_option_add test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_option_assign
  # 
  # Assign option from product.
  # @param product_id Defines product id where the option should be assigned
  # @param option_id Defines option id which has to be assigned
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20068]
  describe 'product_option_assign test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_option_list
  # 
  # Get list of options.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @option opts [String] :product_id Retrieves products&#39; options specified by product id
  # @option opts [String] :lang_id Language id
  # @option opts [String] :store_id Store Id
  # @return [InlineResponse20067]
  describe 'product_option_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_option_value_add
  # 
  # Add product option item from option.
  # @param option_id Defines option id where the value has to be added
  # @param option_value Defines option value that has to be added
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :sort_order Sort number in the list
  # @return [InlineResponse20069]
  describe 'product_option_value_add test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_option_value_assign
  # 
  # Assign product option item from product.
  # @param product_option_id Defines product&#39;s option id where the value has to be assigned
  # @param option_value_id Defines value id that has to be assigned
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20070]
  describe 'product_option_value_assign test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_option_value_update
  # 
  # Update product option item from option.
  # @param option_value_id Defines value id that has to be assigned
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :price Defines new product option price
  # @option opts [Float] :quantity Defines new products&#39; options quantity
  # @return [InlineResponse20027]
  describe 'product_option_value_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_price_add
  # 
  # Add some prices to the product.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2007]
  describe 'product_price_add test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_price_delete
  # 
  # Delete some prices of the product
  # @param product_id Defines the product where the price has to be deleted
  # @param [Hash] opts the optional parameters
  # @option opts [String] :group_prices Defines product&#39;s group prices
  # @return [InlineResponse2004]
  describe 'product_price_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_price_update
  # 
  # Update some prices of the product.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20027]
  describe 'product_price_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_review_list
  # 
  # Get reviews of a specific product.
  # @param product_id Product id
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :ids Retrieves reviews specified by ids
  # @option opts [String] :store_id Store Id
  # @option opts [String] :status Defines status
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [InlineResponse20071]
  describe 'product_review_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_store_assign
  # 
  # Assign product to store
  # @param product_id Defines id of the product which should be assigned to a store
  # @param store_id Defines id of the store product should be assigned to
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20027]
  describe 'product_store_assign test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_tax_add
  # 
  # Add tax class and tax rate to store and assign to product.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20076]
  describe 'product_tax_add test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_update
  # 
  # Update price and quantity for a specific product
  # @param id Defines product id that has to be updated
  # @param [Hash] opts the optional parameters
  # @option opts [String] :model Defines product model that has to be updated
  # @option opts [Float] :price Defines new product&#39;s price
  # @option opts [Float] :special_price Defines new product&#39;s special price
  # @option opts [String] :sprice_create Defines the date of special price creation
  # @option opts [String] :sprice_expire Defines the term of special price offer duration
  # @option opts [Float] :cost_price Defines new product&#39;s cost price
  # @option opts [Float] :retail_price Defines new product&#39;s retail price
  # @option opts [Float] :quantity Defines new product&#39;s quantity
  # @option opts [Float] :weight Weight
  # @option opts [Float] :increase_quantity Defines the incremental changes in product quantity
  # @option opts [Float] :reduce_quantity Defines the decrement changes in product quantity
  # @option opts [String] :warehouse_id This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
  # @option opts [Float] :reserve_quantity This parameter allows to reserve/unreserve product quantity.
  # @option opts [BOOLEAN] :manage_stock Defines inventory tracking for product
  # @option opts [String] :name Defines product&#39;s name that has to be updated
  # @option opts [String] :sku Defines new product&#39;s sku
  # @option opts [String] :visible Set visibility status
  # @option opts [String] :manufacturer Defines product&#39;s manufacturer
  # @option opts [String] :manufacturer_id Defines product&#39;s manufacturer by manufacturer_id
  # @option opts [String] :description Defines new product&#39;s description
  # @option opts [String] :short_description Defines short description
  # @option opts [String] :meta_title Defines unique meta title for each entity
  # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
  # @option opts [String] :meta_description Defines unique meta description of a entity
  # @option opts [String] :store_id Defines store id where the product should be found
  # @option opts [String] :lang_id Language id
  # @option opts [BOOLEAN] :in_stock Set stock status
  # @option opts [String] :status Defines product&#39;s status
  # @option opts [String] :seo_url Defines unique URL for SEO
  # @option opts [String] :report_request_id Report request id
  # @option opts [BOOLEAN] :disable_report_cache Disable report cache for current request
  # @option opts [BOOLEAN] :reindex Is reindex required
  # @option opts [String] :tags Product tags
  # @option opts [BOOLEAN] :clear_cache Is cache clear required
  # @option opts [String] :gtin Global Trade Item Number. An GTIN is an identifier for trade items.
  # @return [InlineResponse20027]
  describe 'product_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_variant_add
  # 
  # Add variant to product.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20072]
  describe 'product_variant_add test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_variant_count
  # 
  # Get count variants.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :created_from Retrieve entities from their creation date
  # @option opts [String] :created_to Retrieve entities to their creation date
  # @option opts [String] :modified_from Retrieve entities from their modification date
  # @option opts [String] :modified_to Retrieve entities to their modification date
  # @option opts [String] :category_id Counts products’ variants specified by category id
  # @option opts [String] :product_id Retrieves products&#39; variants specified by product id
  # @option opts [String] :store_id Retrieves variants specified by store id
  # @return [InlineResponse20075]
  describe 'product_variant_count test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_variant_delete
  # 
  # Delete variant.
  # @param id Defines variant removal, specified by variant id
  # @param product_id Defines product&#39;s id where the variant has to be deleted
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2004]
  describe 'product_variant_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_variant_info
  # 
  # Get variant info.
  # @param id Retrieves variant&#39;s info specified by variant id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @option opts [String] :store_id Retrieves variant info specified by store id
  # @return [InlineResponse20032]
  describe 'product_variant_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_variant_list
  # 
  # Get list variants.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @option opts [String] :created_from Retrieve entities from their creation date
  # @option opts [String] :created_to Retrieve entities to their creation date
  # @option opts [String] :modified_from Retrieve entities from their modification date
  # @option opts [String] :modified_to Retrieve entities to their modification date
  # @option opts [String] :category_id Retrieves products’ variants specified by category id
  # @option opts [String] :product_id Retrieves products&#39; variants specified by product id
  # @option opts [String] :store_id Retrieves variants specified by store id
  # @return [InlineResponse20074]
  describe 'product_variant_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_variant_price_add
  # 
  # Add some prices to the product variant.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2007]
  describe 'product_variant_price_add test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_variant_price_delete
  # 
  # Delete some prices of the product variant.
  # @param id Defines the variant where the price has to be deleted
  # @param [Hash] opts the optional parameters
  # @option opts [String] :group_prices Defines variants&#39;s group prices
  # @return [InlineResponse2004]
  describe 'product_variant_price_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_variant_price_update
  # 
  # Update some prices of the product variant.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20027]
  describe 'product_variant_price_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for product_variant_update
  # 
  # Update variant.
  # @param id Defines variant update specified by variant id
  # @param product_id Defines product&#39;s id where the variant has to be updated
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Defines store id where the variant should be found
  # @option opts [String] :warehouse_id This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
  # @option opts [Float] :reserve_quantity This parameter allows to reserve/unreserve product variants quantity.
  # @option opts [Float] :quantity Defines new products&#39; variants quantity
  # @option opts [Float] :increase_quantity Defines the incremental changes in product quantity
  # @option opts [Float] :reduce_quantity Defines the decrement changes in product quantity
  # @option opts [Float] :price Defines new product&#39;s variant price
  # @option opts [Float] :special_price Defines new product&#39;s variant special price
  # @option opts [String] :sprice_create Defines the date of special price creation
  # @option opts [String] :sprice_expire Defines the term of special price offer duration
  # @option opts [BOOLEAN] :manage_stock Defines inventory tracking for product variant
  # @option opts [BOOLEAN] :in_stock Set stock status
  # @option opts [String] :name Defines variant&#39;s name that has to be updated
  # @option opts [String] :description Specifies variant&#39;s description
  # @option opts [String] :sku Defines new product&#39;s variant sku
  # @option opts [String] :meta_title Defines unique meta title for each entity
  # @option opts [String] :meta_description Defines unique meta description of a entity
  # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
  # @option opts [String] :short_description Defines short description
  # @option opts [String] :visible Set visibility status
  # @option opts [String] :status Defines product variant&#39;s status
  # @option opts [Float] :weight Weight
  # @option opts [BOOLEAN] :reindex Is reindex required
  # @return [InlineResponse20027]
  describe 'product_variant_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
